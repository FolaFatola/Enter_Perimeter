
F401RE_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800432c  0800432c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800432c  0800432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004334  08004334  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004334  08004334  00005334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004338  08004338  00005338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800433c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08004398  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004398  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd7d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  00011e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00013a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000777  00000000  00000000  000143e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018423  00000000  00000000  00014b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd3d  00000000  00000000  0002cf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a568  00000000  00000000  00039cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c421f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c74  00000000  00000000  000c4264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c6ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800426c 	.word	0x0800426c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800426c 	.word	0x0800426c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b0a9      	sub	sp, #164	@ 0xa4
 8000574:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb13 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f8ad 	bl	80006d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f977 	bl	8000870 <_ZL12MX_GPIO_Initv>
  MX_I2C2_Init();
 8000582:	f000 f913 	bl	80007ac <_ZL12MX_I2C2_Initv>
  MX_USART2_UART_Init();
 8000586:	f000 f945 	bl	8000814 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  bool use_tfh_time = true;
 800058a:	2301      	movs	r3, #1
 800058c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  uint8_t seconds = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  uint8_t minutes = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  uint8_t hours = 6;
 800059c:	2306      	movs	r3, #6
 800059e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
  uint8_t weekday = SATURDAY;
 80005a2:	2307      	movs	r3, #7
 80005a4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
  uint8_t date_day = 12;
 80005a8:	230c      	movs	r3, #12
 80005aa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  uint8_t month = APRIL;
 80005ae:	2304      	movs	r3, #4
 80005b0:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  uint8_t year = 25;
 80005b4:	2319      	movs	r3, #25
 80005b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  Time_RTC rtc_sensor_time{&hi2c2, use_tfh_time, seconds, minutes, hours, weekday, date_day, month, year};
 80005ba:	f897 e086 	ldrb.w	lr, [r7, #134]	@ 0x86
 80005be:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80005c2:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 80005c6:	f897 1083 	ldrb.w	r1, [r7, #131]	@ 0x83
 80005ca:	f897 0082 	ldrb.w	r0, [r7, #130]	@ 0x82
 80005ce:	f897 4081 	ldrb.w	r4, [r7, #129]	@ 0x81
 80005d2:	f897 5080 	ldrb.w	r5, [r7, #128]	@ 0x80
 80005d6:	f897 c087 	ldrb.w	ip, [r7, #135]	@ 0x87
 80005da:	f107 0664 	add.w	r6, r7, #100	@ 0x64
 80005de:	9505      	str	r5, [sp, #20]
 80005e0:	9404      	str	r4, [sp, #16]
 80005e2:	9003      	str	r0, [sp, #12]
 80005e4:	9102      	str	r1, [sp, #8]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4673      	mov	r3, lr
 80005ec:	4662      	mov	r2, ip
 80005ee:	4937      	ldr	r1, [pc, #220]	@ (80006cc <main+0x15c>)
 80005f0:	4630      	mov	r0, r6
 80005f2:	f002 fe75 	bl	80032e0 <_ZN8Time_RTCC1EP17I2C_HandleTypeDefbhhhhhhh>
  rtc_sensor_time.rtc_init();
 80005f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fef2 	bl	80033e4 <_ZN8Time_RTC8rtc_initEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rtc_sensor_time.rtc_get_time_unit(SECONDS, seconds);
 8000600:	f107 0286 	add.w	r2, r7, #134	@ 0x86
 8000604:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 ffbc 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>
	  rtc_sensor_time.rtc_get_time_unit(MINUTES, minutes);
 8000610:	f107 0285 	add.w	r2, r7, #133	@ 0x85
 8000614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000618:	2101      	movs	r1, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffb4 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>
	  rtc_sensor_time.rtc_get_time_unit(HOURS, hours);
 8000620:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000624:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ffac 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>
	  rtc_sensor_time.rtc_get_time_unit(WEEK_DAY, weekday);
 8000630:	f107 0283 	add.w	r2, r7, #131	@ 0x83
 8000634:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000638:	2103      	movs	r1, #3
 800063a:	4618      	mov	r0, r3
 800063c:	f002 ffa4 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>
	  rtc_sensor_time.rtc_get_time_unit(DATE_DAY, date_day);
 8000640:	f107 0282 	add.w	r2, r7, #130	@ 0x82
 8000644:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f002 ff9c 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>
	  rtc_sensor_time.rtc_get_time_unit(MONTH, month);
 8000650:	f107 0281 	add.w	r2, r7, #129	@ 0x81
 8000654:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ff94 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>
	  rtc_sensor_time.rtc_get_time_unit(YEAR, year);
 8000660:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000664:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000668:	2106      	movs	r1, #6
 800066a:	4618      	mov	r0, r3
 800066c:	f002 ff8c 	bl	8003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>

	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sprintf(message, "Seconds: %d, Minutes: %d, Hours: %d, "
 8000670:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000674:	461e      	mov	r6, r3
 8000676:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800067a:	469c      	mov	ip, r3
 800067c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8000680:	461a      	mov	r2, r3
 8000682:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000686:	4619      	mov	r1, r3
 8000688:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800068c:	461c      	mov	r4, r3
 800068e:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8000692:	461d      	mov	r5, r3
			  "Week_Day: %d, Date_Day %d, Month %d, Year %d\r\n",
			  seconds, minutes, hours, weekday, date_day, month, year+millennium), 100);
 8000694:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sprintf(message, "Seconds: %d, Minutes: %d, Hours: %d, "
 8000698:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800069c:	4638      	mov	r0, r7
 800069e:	9304      	str	r3, [sp, #16]
 80006a0:	9503      	str	r5, [sp, #12]
 80006a2:	9402      	str	r4, [sp, #8]
 80006a4:	9101      	str	r1, [sp, #4]
 80006a6:	9200      	str	r2, [sp, #0]
 80006a8:	4663      	mov	r3, ip
 80006aa:	4632      	mov	r2, r6
 80006ac:	4908      	ldr	r1, [pc, #32]	@ (80006d0 <main+0x160>)
 80006ae:	f003 f93d 	bl	800392c <siprintf>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4639      	mov	r1, r7
 80006b8:	2364      	movs	r3, #100	@ 0x64
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <main+0x164>)
 80006bc:	f002 fa3c 	bl	8002b38 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c4:	f000 fade 	bl	8000c84 <HAL_Delay>
	  rtc_sensor_time.rtc_get_time_unit(SECONDS, seconds);
 80006c8:	bf00      	nop
 80006ca:	e799      	b.n	8000600 <main+0x90>
 80006cc:	20000078 	.word	0x20000078
 80006d0:	08004284 	.word	0x08004284
 80006d4:	200000cc 	.word	0x200000cc

080006d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f940 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <_Z18SystemClock_Configv+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <_Z18SystemClock_Configv+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <_Z18SystemClock_Configv+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <_Z18SystemClock_Configv+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000724:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <_Z18SystemClock_Configv+0xd0>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <_Z18SystemClock_Configv+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fd4b 	bl	80021e8 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000762:	f000 f8ad 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ffa9 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000796:	f000 f893 	bl	80008c0 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007b2:	4a16      	ldr	r2, [pc, #88]	@ (800080c <_ZL12MX_I2C2_Initv+0x60>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007b8:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <_ZL12MX_I2C2_Initv+0x64>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <_ZL12MX_I2C2_Initv+0x5c>)
 80007ea:	f000 fcd9 	bl	80011a0 <HAL_I2C_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80007fe:	f000 f85f 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000078 	.word	0x20000078
 800080c:	40005800 	.word	0x40005800
 8000810:	000186a0 	.word	0x000186a0

08000814 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 800081a:	4a14      	ldr	r2, [pc, #80]	@ (800086c <_ZL19MX_USART2_UART_Initv+0x58>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000820:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4807      	ldr	r0, [pc, #28]	@ (8000868 <_ZL19MX_USART2_UART_Initv+0x54>)
 800084c:	f002 f924 	bl	8002a98 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf14      	ite	ne
 8000856:	2301      	movne	r3, #1
 8000858:	2300      	moveq	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000860:	f000 f82e 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000cc 	.word	0x200000cc
 800086c:	40004400 	.word	0x40004400

08000870 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <_ZL12MX_GPIO_Initv+0x4c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <_ZL12MX_GPIO_Initv+0x4c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <_ZL12MX_GPIO_Initv+0x4c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <_ZL12MX_GPIO_Initv+0x4c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <_ZL12MX_GPIO_Initv+0x4c>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <_ZL12MX_GPIO_Initv+0x4c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <Error_Handler+0x8>

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <HAL_I2C_MspInit+0xa4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d13c      	bne.n	80009b8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <HAL_I2C_MspInit+0xa8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a1f      	ldr	r2, [pc, #124]	@ (80009c4 <HAL_I2C_MspInit+0xa8>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <HAL_I2C_MspInit+0xa8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800096c:	2304      	movs	r3, #4
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4814      	ldr	r0, [pc, #80]	@ (80009c8 <HAL_I2C_MspInit+0xac>)
 8000978:	f000 fa8e 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800097c:	2308      	movs	r3, #8
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800098c:	2309      	movs	r3, #9
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <HAL_I2C_MspInit+0xac>)
 8000998:	f000 fa7e 	bl	8000e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_I2C_MspInit+0xa8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <HAL_I2C_MspInit+0xa8>)
 80009a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_I2C_MspInit+0xa8>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40005800 	.word	0x40005800
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <HAL_UART_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12b      	bne.n	8000a46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a26:	230c      	movs	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a42:	f000 fa29 	bl	8000e98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <MemManage_Handler+0x4>

08000a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 f8c7 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f002 ff46 	bl	800397c <__errno>
 8000af0:	4603      	mov	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20018000 	.word	0x20018000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	20000114 	.word	0x20000114
 8000b24:	20000268 	.word	0x20000268

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f002 ff05 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fcf7 	bl	8000570 <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b90:	0800433c 	.word	0x0800433c
  ldr r2, =_sbss
 8000b94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b98:	20000264 	.word	0x20000264

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	@ (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f931 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe7a 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f93b 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 f911 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000118 	.word	0x20000118

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000118 	.word	0x20000118

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e10:	f7ff ff8e 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff47 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff5c 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff8e 	bl	8000d84 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffb0 	bl	8000dec <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e159      	b.n	8001168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8148 	bne.w	8001162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a2 	beq.w	8001162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b57      	ldr	r3, [pc, #348]	@ (8001180 <HAL_GPIO_Init+0x2e8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a56      	ldr	r2, [pc, #344]	@ (8001180 <HAL_GPIO_Init+0x2e8>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b54      	ldr	r3, [pc, #336]	@ (8001180 <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a52      	ldr	r2, [pc, #328]	@ (8001184 <HAL_GPIO_Init+0x2ec>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	@ (8001188 <HAL_GPIO_Init+0x2f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x202>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	@ (800118c <HAL_GPIO_Init+0x2f4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x1fe>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a47      	ldr	r2, [pc, #284]	@ (8001190 <HAL_GPIO_Init+0x2f8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x1fa>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a46      	ldr	r2, [pc, #280]	@ (8001194 <HAL_GPIO_Init+0x2fc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x1f6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a45      	ldr	r2, [pc, #276]	@ (8001198 <HAL_GPIO_Init+0x300>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x1f2>
 8001086:	2304      	movs	r3, #4
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108a:	2307      	movs	r3, #7
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x204>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	@ (8001184 <HAL_GPIO_Init+0x2ec>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b38      	ldr	r3, [pc, #224]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a24      	ldr	r2, [pc, #144]	@ (800119c <HAL_GPIO_Init+0x304>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_GPIO_Init+0x304>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001132:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <HAL_GPIO_Init+0x304>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_GPIO_Init+0x304>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115c:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <HAL_GPIO_Init+0x304>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f aea2 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e12b      	b.n	800140a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fba8 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2224      	movs	r2, #36	@ 0x24
 80011d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001204:	f001 fc20 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a81      	ldr	r2, [pc, #516]	@ (8001414 <HAL_I2C_Init+0x274>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d807      	bhi.n	8001224 <HAL_I2C_Init+0x84>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4a80      	ldr	r2, [pc, #512]	@ (8001418 <HAL_I2C_Init+0x278>)
 8001218:	4293      	cmp	r3, r2
 800121a:	bf94      	ite	ls
 800121c:	2301      	movls	r3, #1
 800121e:	2300      	movhi	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e006      	b.n	8001232 <HAL_I2C_Init+0x92>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4a7d      	ldr	r2, [pc, #500]	@ (800141c <HAL_I2C_Init+0x27c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	bf94      	ite	ls
 800122c:	2301      	movls	r3, #1
 800122e:	2300      	movhi	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0e7      	b.n	800140a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4a78      	ldr	r2, [pc, #480]	@ (8001420 <HAL_I2C_Init+0x280>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	0c9b      	lsrs	r3, r3, #18
 8001244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	430a      	orrs	r2, r1
 8001258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a6a      	ldr	r2, [pc, #424]	@ (8001414 <HAL_I2C_Init+0x274>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d802      	bhi.n	8001274 <HAL_I2C_Init+0xd4>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	e009      	b.n	8001288 <HAL_I2C_Init+0xe8>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	4a69      	ldr	r2, [pc, #420]	@ (8001424 <HAL_I2C_Init+0x284>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	099b      	lsrs	r3, r3, #6
 8001286:	3301      	adds	r3, #1
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	430b      	orrs	r3, r1
 800128e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800129a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	495c      	ldr	r1, [pc, #368]	@ (8001414 <HAL_I2C_Init+0x274>)
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d819      	bhi.n	80012dc <HAL_I2C_Init+0x13c>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1e59      	subs	r1, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012bc:	400b      	ands	r3, r1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <HAL_I2C_Init+0x138>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1e59      	subs	r1, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d6:	e051      	b.n	800137c <HAL_I2C_Init+0x1dc>
 80012d8:	2304      	movs	r3, #4
 80012da:	e04f      	b.n	800137c <HAL_I2C_Init+0x1dc>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d111      	bne.n	8001308 <HAL_I2C_Init+0x168>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	440b      	add	r3, r1
 80012f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	e012      	b.n	800132e <HAL_I2C_Init+0x18e>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1e58      	subs	r0, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	0099      	lsls	r1, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	fbb0 f3f3 	udiv	r3, r0, r3
 800131e:	3301      	adds	r3, #1
 8001320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Init+0x196>
 8001332:	2301      	movs	r3, #1
 8001334:	e022      	b.n	800137c <HAL_I2C_Init+0x1dc>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10e      	bne.n	800135c <HAL_I2C_Init+0x1bc>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1e58      	subs	r0, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6859      	ldr	r1, [r3, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	440b      	add	r3, r1
 800134c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001350:	3301      	adds	r3, #1
 8001352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800135a:	e00f      	b.n	800137c <HAL_I2C_Init+0x1dc>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1e58      	subs	r0, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	0099      	lsls	r1, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001372:	3301      	adds	r3, #1
 8001374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001378:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	6809      	ldr	r1, [r1, #0]
 8001380:	4313      	orrs	r3, r2
 8001382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6911      	ldr	r1, [r2, #16]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68d2      	ldr	r2, [r2, #12]
 80013b6:	4311      	orrs	r1, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	430b      	orrs	r3, r1
 80013be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	000186a0 	.word	0x000186a0
 8001418:	001e847f 	.word	0x001e847f
 800141c:	003d08ff 	.word	0x003d08ff
 8001420:	431bde83 	.word	0x431bde83
 8001424:	10624dd3 	.word	0x10624dd3

08001428 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4603      	mov	r3, r0
 8001438:	817b      	strh	r3, [r7, #10]
 800143a:	460b      	mov	r3, r1
 800143c:	813b      	strh	r3, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001442:	f7ff fc13 	bl	8000c6c <HAL_GetTick>
 8001446:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b20      	cmp	r3, #32
 8001452:	f040 80d9 	bne.w	8001608 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2319      	movs	r3, #25
 800145c:	2201      	movs	r2, #1
 800145e:	496d      	ldr	r1, [pc, #436]	@ (8001614 <HAL_I2C_Mem_Write+0x1ec>)
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 fc8b 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800146c:	2302      	movs	r3, #2
 800146e:	e0cc      	b.n	800160a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_I2C_Mem_Write+0x56>
 800147a:	2302      	movs	r3, #2
 800147c:	e0c5      	b.n	800160a <HAL_I2C_Mem_Write+0x1e2>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d007      	beq.n	80014a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2221      	movs	r2, #33	@ 0x21
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2240      	movs	r2, #64	@ 0x40
 80014c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014da:	b29a      	uxth	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a4d      	ldr	r2, [pc, #308]	@ (8001618 <HAL_I2C_Mem_Write+0x1f0>)
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e6:	88f8      	ldrh	r0, [r7, #6]
 80014e8:	893a      	ldrh	r2, [r7, #8]
 80014ea:	8979      	ldrh	r1, [r7, #10]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4603      	mov	r3, r0
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fac2 	bl	8001a80 <I2C_RequestMemoryWrite>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d052      	beq.n	80015a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e081      	b.n	800160a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 fd50 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00d      	beq.n	8001532 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	2b04      	cmp	r3, #4
 800151c:	d107      	bne.n	800152e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800152c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06b      	b.n	800160a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b04      	cmp	r3, #4
 800156e:	d11b      	bne.n	80015a8 <HAL_I2C_Mem_Write+0x180>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d017      	beq.n	80015a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001592:	3b01      	subs	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1aa      	bne.n	8001506 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fd43 	bl	8002040 <I2C_WaitOnBTFFlagUntilTimeout>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00d      	beq.n	80015dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d107      	bne.n	80015d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e016      	b.n	800160a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001608:	2302      	movs	r3, #2
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	00100002 	.word	0x00100002
 8001618:	ffff0000 	.word	0xffff0000

0800161c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4603      	mov	r3, r0
 800162c:	817b      	strh	r3, [r7, #10]
 800162e:	460b      	mov	r3, r1
 8001630:	813b      	strh	r3, [r7, #8]
 8001632:	4613      	mov	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001636:	f7ff fb19 	bl	8000c6c <HAL_GetTick>
 800163a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b20      	cmp	r3, #32
 8001646:	f040 8214 	bne.w	8001a72 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2319      	movs	r3, #25
 8001650:	2201      	movs	r2, #1
 8001652:	497b      	ldr	r1, [pc, #492]	@ (8001840 <HAL_I2C_Mem_Read+0x224>)
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fb91 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001660:	2302      	movs	r3, #2
 8001662:	e207      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Mem_Read+0x56>
 800166e:	2302      	movs	r3, #2
 8001670:	e200      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d007      	beq.n	8001698 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2222      	movs	r2, #34	@ 0x22
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2240      	movs	r2, #64	@ 0x40
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80016c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001844 <HAL_I2C_Mem_Read+0x228>)
 80016d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	893a      	ldrh	r2, [r7, #8]
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4603      	mov	r3, r0
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 fa5e 	bl	8001bac <I2C_RequestMemoryRead>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1bc      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d113      	bne.n	800172a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e190      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172e:	2b01      	cmp	r3, #1
 8001730:	d11b      	bne.n	800176a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e170      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	2b02      	cmp	r3, #2
 8001770:	d11b      	bne.n	80017aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001780:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	e150      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80017c0:	e144      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	f200 80f1 	bhi.w	80019ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d123      	bne.n	800181c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fc79 	bl	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e145      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800181a:	e117      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	2b02      	cmp	r3, #2
 8001822:	d14e      	bne.n	80018c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182a:	2200      	movs	r2, #0
 800182c:	4906      	ldr	r1, [pc, #24]	@ (8001848 <HAL_I2C_Mem_Read+0x22c>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 faa4 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e11a      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
 800183e:	bf00      	nop
 8001840:	00100002 	.word	0x00100002
 8001844:	ffff0000 	.word	0xffff0000
 8001848:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018c0:	e0c4      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c8:	2200      	movs	r2, #0
 80018ca:	496c      	ldr	r1, [pc, #432]	@ (8001a7c <HAL_I2C_Mem_Read+0x460>)
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fa55 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0cb      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001924:	2200      	movs	r2, #0
 8001926:	4955      	ldr	r1, [pc, #340]	@ (8001a7c <HAL_I2C_Mem_Read+0x460>)
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fa27 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e09d      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019ac:	e04e      	b.n	8001a4c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 fb8c 	bl	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e058      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d124      	bne.n	8001a4c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a18:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aeb6 	bne.w	80017c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	00010004 	.word	0x00010004

08001a80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	817b      	strh	r3, [r7, #10]
 8001a92:	460b      	mov	r3, r1
 8001a94:	813b      	strh	r3, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f960 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00d      	beq.n	8001ade <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad0:	d103      	bne.n	8001ada <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e05f      	b.n	8001b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ade:	897b      	ldrh	r3, [r7, #10]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	492d      	ldr	r1, [pc, #180]	@ (8001ba8 <I2C_RequestMemoryWrite+0x128>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f9bb 	bl	8001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e04c      	b.n	8001b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa46 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d107      	bne.n	8001b42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e02b      	b.n	8001b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b4c:	893b      	ldrh	r3, [r7, #8]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	e021      	b.n	8001b9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b58:	893b      	ldrh	r3, [r7, #8]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fa20 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e005      	b.n	8001b9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b92:	893b      	ldrh	r3, [r7, #8]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00010002 	.word	0x00010002

08001bac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	817b      	strh	r3, [r7, #10]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	813b      	strh	r3, [r7, #8]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f8c2 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c0c:	d103      	bne.n	8001c16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0aa      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	4952      	ldr	r1, [pc, #328]	@ (8001d78 <I2C_RequestMemoryRead+0x1cc>)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f91d 	bl	8001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e097      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f9a8 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d107      	bne.n	8001c7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e076      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c88:	893b      	ldrh	r3, [r7, #8]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	e021      	b.n	8001cd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c94:	893b      	ldrh	r3, [r7, #8]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f982 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e050      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cce:	893b      	ldrh	r3, [r7, #8]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	6a39      	ldr	r1, [r7, #32]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f967 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e035      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f82b 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d3a:	d103      	bne.n	8001d44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e013      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d48:	897b      	ldrh	r3, [r7, #10]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	6a3a      	ldr	r2, [r7, #32]
 8001d5c:	4906      	ldr	r1, [pc, #24]	@ (8001d78 <I2C_RequestMemoryRead+0x1cc>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f886 	bl	8001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	00010002 	.word	0x00010002

08001d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d8c:	e048      	b.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d94:	d044      	beq.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7fe ff69 	bl	8000c6c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d139      	bne.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10d      	bne.n	8001dd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	e00c      	b.n	8001dec <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d116      	bne.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e023      	b.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10d      	bne.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	e00c      	b.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	4013      	ands	r3, r2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d093      	beq.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e7e:	e071      	b.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8e:	d123      	bne.n	8001ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e067      	b.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ede:	d041      	beq.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee0:	f7fe fec4 	bl	8000c6c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d302      	bcc.n	8001ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d136      	bne.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10c      	bne.n	8001f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf14      	ite	ne
 8001f12:	2301      	movne	r3, #1
 8001f14:	2300      	moveq	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	e00b      	b.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	43da      	mvns	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e021      	b.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	0c1b      	lsrs	r3, r3, #16
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d10c      	bne.n	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	43da      	mvns	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e00b      	b.n	8001fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f af6d 	bne.w	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fbc:	e034      	b.n	8002028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f8e3 	bl	800218a <I2C_IsAcknowledgeFailed>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e034      	b.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fd4:	d028      	beq.n	8002028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7fe fe49 	bl	8000c6c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11d      	bne.n	8002028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff6:	2b80      	cmp	r3, #128	@ 0x80
 8001ff8:	d016      	beq.n	8002028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e007      	b.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b80      	cmp	r3, #128	@ 0x80
 8002034:	d1c3      	bne.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800204c:	e034      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f89b 	bl	800218a <I2C_IsAcknowledgeFailed>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e034      	b.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002064:	d028      	beq.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002066:	f7fe fe01 	bl	8000c6c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d302      	bcc.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11d      	bne.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d016      	beq.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e007      	b.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d1c3      	bne.n	800204e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020dc:	e049      	b.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d119      	bne.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0210 	mvn.w	r2, #16
 80020f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e030      	b.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002120:	f7fe fda4 	bl	8000c6c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d302      	bcc.n	8002136 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11d      	bne.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b40      	cmp	r3, #64	@ 0x40
 8002142:	d016      	beq.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b40      	cmp	r3, #64	@ 0x40
 800217e:	d1ae      	bne.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a0:	d11b      	bne.n	80021da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f043 0204 	orr.w	r2, r3, #4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e267      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d075      	beq.n	80022f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002206:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d00c      	beq.n	800222c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b85      	ldr	r3, [pc, #532]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800221a:	2b08      	cmp	r3, #8
 800221c:	d112      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221e:	4b82      	ldr	r3, [pc, #520]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b7e      	ldr	r3, [pc, #504]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x108>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d157      	bne.n	80022f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e242      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x74>
 800224e:	4b76      	ldr	r3, [pc, #472]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a75      	ldr	r2, [pc, #468]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002266:	4b70      	ldr	r3, [pc, #448]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6f      	ldr	r2, [pc, #444]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6d      	ldr	r3, [pc, #436]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6c      	ldr	r2, [pc, #432]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 8002280:	4b69      	ldr	r3, [pc, #420]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a68      	ldr	r2, [pc, #416]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b66      	ldr	r3, [pc, #408]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a65      	ldr	r2, [pc, #404]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fce4 	bl	8000c6c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe fce0 	bl	8000c6c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e207      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xc0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fcd0 	bl	8000c6c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fccc 	bl	8000c6c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1f3      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0xe8>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b44      	ldr	r3, [pc, #272]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1c7      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4937      	ldr	r1, [pc, #220]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b34      	ldr	r3, [pc, #208]	@ (800242c <HAL_RCC_OscConfig+0x244>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fc85 	bl	8000c6c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe fc81 	bl	8000c6c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e1a8      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4925      	ldr	r1, [pc, #148]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b24      	ldr	r3, [pc, #144]	@ (800242c <HAL_RCC_OscConfig+0x244>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fc64 	bl	8000c6c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a8:	f7fe fc60 	bl	8000c6c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e187      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d036      	beq.n	8002440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_RCC_OscConfig+0x248>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fc44 	bl	8000c6c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe fc40 	bl	8000c6c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e167      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_OscConfig+0x240>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x200>
 8002406:	e01b      	b.n	8002440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_RCC_OscConfig+0x248>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7fe fc2d 	bl	8000c6c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	e00e      	b.n	8002434 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe fc29 	bl	8000c6c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d907      	bls.n	8002434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e150      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b88      	ldr	r3, [pc, #544]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ea      	bne.n	8002416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8097 	beq.w	800257c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b81      	ldr	r3, [pc, #516]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b7d      	ldr	r3, [pc, #500]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	4a7c      	ldr	r2, [pc, #496]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	@ 0x40
 800246e:	4b7a      	ldr	r3, [pc, #488]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b77      	ldr	r3, [pc, #476]	@ (800265c <HAL_RCC_OscConfig+0x474>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b74      	ldr	r3, [pc, #464]	@ (800265c <HAL_RCC_OscConfig+0x474>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a73      	ldr	r2, [pc, #460]	@ (800265c <HAL_RCC_OscConfig+0x474>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7fe fbe9 	bl	8000c6c <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe fbe5 	bl	8000c6c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e10c      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b6a      	ldr	r3, [pc, #424]	@ (800265c <HAL_RCC_OscConfig+0x474>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2ea>
 80024c4:	4b64      	ldr	r3, [pc, #400]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c8:	4a63      	ldr	r2, [pc, #396]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x324>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x30c>
 80024da:	4b5f      	ldr	r3, [pc, #380]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	4a5e      	ldr	r2, [pc, #376]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0x324>
 80024f4:	4b58      	ldr	r3, [pc, #352]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	4a57      	ldr	r2, [pc, #348]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002500:	4b55      	ldr	r3, [pc, #340]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	4a54      	ldr	r2, [pc, #336]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fbaa 	bl	8000c6c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe fba6 	bl	8000c6c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0cb      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	4b49      	ldr	r3, [pc, #292]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ee      	beq.n	800251c <HAL_RCC_OscConfig+0x334>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002540:	f7fe fb94 	bl	8000c6c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fb90 	bl	8000c6c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0b5      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ee      	bne.n	8002548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4b39      	ldr	r3, [pc, #228]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	4a38      	ldr	r2, [pc, #224]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a1 	beq.w	80026c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002586:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d05c      	beq.n	800264c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d141      	bne.n	800261e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <HAL_RCC_OscConfig+0x478>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fb64 	bl	8000c6c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fb60 	bl	8000c6c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e087      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	491b      	ldr	r1, [pc, #108]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x478>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fb39 	bl	8000c6c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fb35 	bl	8000c6c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e05c      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x416>
 800261c:	e054      	b.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HAL_RCC_OscConfig+0x478>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fb22 	bl	8000c6c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fb1e 	bl	8000c6c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e045      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_RCC_OscConfig+0x470>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x444>
 800264a:	e03d      	b.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e038      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002664:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <HAL_RCC_OscConfig+0x4ec>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d028      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800269a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0cc      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b68      	ldr	r3, [pc, #416]	@ (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d90c      	bls.n	8002714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b65      	ldr	r3, [pc, #404]	@ (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	@ (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a58      	ldr	r2, [pc, #352]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a52      	ldr	r2, [pc, #328]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d044      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d119      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d003      	beq.n	8002796 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	2b03      	cmp	r3, #3
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b3f      	ldr	r3, [pc, #252]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e067      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4934      	ldr	r1, [pc, #208]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fa50 	bl	8000c6c <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fa4c 	bl	8000c6c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e04f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d20c      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490a      	ldr	r1, [pc, #40]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f9b0 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	080042e0 	.word	0x080042e0
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b090      	sub	sp, #64	@ 0x40
 80028aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028bc:	4b59      	ldr	r3, [pc, #356]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x40>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	f200 80a1 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x16c>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x34>
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x3a>
 80028d6:	e09b      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x184>)
 80028da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028dc:	e09b      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028de:	4b53      	ldr	r3, [pc, #332]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x188>)
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028e2:	e098      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d028      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	623b      	str	r3, [r7, #32]
 8002904:	627a      	str	r2, [r7, #36]	@ 0x24
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800290c:	2100      	movs	r1, #0
 800290e:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002910:	fb03 f201 	mul.w	r2, r3, r1
 8002914:	2300      	movs	r3, #0
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	4413      	add	r3, r2
 800291c:	4a43      	ldr	r2, [pc, #268]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x188>)
 800291e:	fba0 1202 	umull	r1, r2, r0, r2
 8002922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002924:	460a      	mov	r2, r1
 8002926:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800292a:	4413      	add	r3, r2
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002930:	2200      	movs	r2, #0
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	61fa      	str	r2, [r7, #28]
 8002936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800293e:	f7fd fc9f 	bl	8000280 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4613      	mov	r3, r2
 8002948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800294a:	e053      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4b35      	ldr	r3, [pc, #212]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	2200      	movs	r2, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	617a      	str	r2, [r7, #20]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800295e:	f04f 0b00 	mov.w	fp, #0
 8002962:	4652      	mov	r2, sl
 8002964:	465b      	mov	r3, fp
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	ebb2 080a 	subs.w	r8, r2, sl
 800297e:	eb63 090b 	sbc.w	r9, r3, fp
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800298e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002992:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002996:	ebb2 0408 	subs.w	r4, r2, r8
 800299a:	eb63 0509 	sbc.w	r5, r3, r9
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	00eb      	lsls	r3, r5, #3
 80029a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ac:	00e2      	lsls	r2, r4, #3
 80029ae:	4614      	mov	r4, r2
 80029b0:	461d      	mov	r5, r3
 80029b2:	eb14 030a 	adds.w	r3, r4, sl
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	eb45 030b 	adc.w	r3, r5, fp
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ca:	4629      	mov	r1, r5
 80029cc:	028b      	lsls	r3, r1, #10
 80029ce:	4621      	mov	r1, r4
 80029d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d4:	4621      	mov	r1, r4
 80029d6:	028a      	lsls	r2, r1, #10
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029de:	2200      	movs	r2, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	60fa      	str	r2, [r7, #12]
 80029e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e8:	f7fd fc4a 	bl	8000280 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3740      	adds	r7, #64	@ 0x40
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	017d7840 	.word	0x017d7840

08002a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	@ (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	080042f0 	.word	0x080042f0

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffdc 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0b5b      	lsrs	r3, r3, #13
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	@ (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	080042f0 	.word	0x080042f0

08002a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e042      	b.n	8002b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd ff84 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	@ 0x24
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f973 	bl	8002dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	@ 0x28
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d175      	bne.n	8002c44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Transmit+0x2c>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e06e      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2221      	movs	r2, #33	@ 0x21
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b76:	f7fe f879 	bl	8000c6c <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b90:	d108      	bne.n	8002ba4 <HAL_UART_Transmit+0x6c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e003      	b.n	8002bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bac:	e02e      	b.n	8002c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f848 	bl	8002c4e <UART_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e03a      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	3302      	adds	r3, #2
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	e007      	b.n	8002bfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1cb      	bne.n	8002bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2140      	movs	r1, #64	@ 0x40
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f814 	bl	8002c4e <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e006      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5e:	e03b      	b.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c66:	d037      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7fe f800 	bl	8000c6c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	6a3a      	ldr	r2, [r7, #32]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e03a      	b.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d023      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b80      	cmp	r3, #128	@ 0x80
 8002c94:	d020      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b40      	cmp	r3, #64	@ 0x40
 8002c9a:	d01d      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d116      	bne.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f81d 	bl	8002d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e00f      	b.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d0b4      	beq.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b095      	sub	sp, #84	@ 0x54
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d28:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e5      	bne.n	8002d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3314      	adds	r3, #20
 8002d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e5      	bne.n	8002d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d119      	bne.n	8002dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f023 0310 	bic.w	r3, r3, #16
 8002d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d98:	61ba      	str	r2, [r7, #24]
 8002d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	613b      	str	r3, [r7, #16]
   return(result);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dba:	bf00      	nop
 8002dbc:	3754      	adds	r7, #84	@ 0x54
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dcc:	b0c0      	sub	sp, #256	@ 0x100
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	68d9      	ldr	r1, [r3, #12]
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	ea40 0301 	orr.w	r3, r0, r1
 8002df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e20:	f021 010c 	bic.w	r1, r1, #12
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e42:	6999      	ldr	r1, [r3, #24]
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	ea40 0301 	orr.w	r3, r0, r1
 8002e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b8f      	ldr	r3, [pc, #572]	@ (8003094 <UART_SetConfig+0x2cc>)
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d005      	beq.n	8002e68 <UART_SetConfig+0xa0>
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b8d      	ldr	r3, [pc, #564]	@ (8003098 <UART_SetConfig+0x2d0>)
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d104      	bne.n	8002e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7ff fe02 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8002e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e70:	e003      	b.n	8002e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e72:	f7ff fde9 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8002e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e84:	f040 810c 	bne.w	80030a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	1891      	adds	r1, r2, r2
 8002ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ea2:	415b      	adcs	r3, r3
 8002ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eaa:	4621      	mov	r1, r4
 8002eac:	eb12 0801 	adds.w	r8, r2, r1
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb43 0901 	adc.w	r9, r3, r1
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eca:	4690      	mov	r8, r2
 8002ecc:	4699      	mov	r9, r3
 8002ece:	4623      	mov	r3, r4
 8002ed0:	eb18 0303 	adds.w	r3, r8, r3
 8002ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ed8:	462b      	mov	r3, r5
 8002eda:	eb49 0303 	adc.w	r3, r9, r3
 8002ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	18db      	adds	r3, r3, r3
 8002efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002efc:	4613      	mov	r3, r2
 8002efe:	eb42 0303 	adc.w	r3, r2, r3
 8002f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f0c:	f7fd f9b8 	bl	8000280 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4b61      	ldr	r3, [pc, #388]	@ (800309c <UART_SetConfig+0x2d4>)
 8002f16:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	011c      	lsls	r4, r3, #4
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f40:	4641      	mov	r1, r8
 8002f42:	eb12 0a01 	adds.w	sl, r2, r1
 8002f46:	4649      	mov	r1, r9
 8002f48:	eb43 0b01 	adc.w	fp, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f60:	4692      	mov	sl, r2
 8002f62:	469b      	mov	fp, r3
 8002f64:	4643      	mov	r3, r8
 8002f66:	eb1a 0303 	adds.w	r3, sl, r3
 8002f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	eb4b 0303 	adc.w	r3, fp, r3
 8002f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	18db      	adds	r3, r3, r3
 8002f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f92:	4613      	mov	r3, r2
 8002f94:	eb42 0303 	adc.w	r3, r2, r3
 8002f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fa2:	f7fd f96d 	bl	8000280 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <UART_SetConfig+0x2d4>)
 8002fae:	fba3 2301 	umull	r2, r3, r3, r1
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2264      	movs	r2, #100	@ 0x64
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	1acb      	subs	r3, r1, r3
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <UART_SetConfig+0x2d4>)
 8002fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fd0:	441c      	add	r4, r3
 8002fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	1891      	adds	r1, r2, r2
 8002fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fec:	415b      	adcs	r3, r3
 8002fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ff4:	4641      	mov	r1, r8
 8002ff6:	1851      	adds	r1, r2, r1
 8002ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	414b      	adcs	r3, r1
 8002ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800300c:	4659      	mov	r1, fp
 800300e:	00cb      	lsls	r3, r1, #3
 8003010:	4651      	mov	r1, sl
 8003012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003016:	4651      	mov	r1, sl
 8003018:	00ca      	lsls	r2, r1, #3
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	4603      	mov	r3, r0
 8003020:	4642      	mov	r2, r8
 8003022:	189b      	adds	r3, r3, r2
 8003024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003028:	464b      	mov	r3, r9
 800302a:	460a      	mov	r2, r1
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003048:	460b      	mov	r3, r1
 800304a:	18db      	adds	r3, r3, r3
 800304c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800304e:	4613      	mov	r3, r2
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800305a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800305e:	f7fd f90f 	bl	8000280 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <UART_SetConfig+0x2d4>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	2164      	movs	r1, #100	@ 0x64
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3332      	adds	r3, #50	@ 0x32
 800307a:	4a08      	ldr	r2, [pc, #32]	@ (800309c <UART_SetConfig+0x2d4>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	f003 0207 	and.w	r2, r3, #7
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4422      	add	r2, r4
 800308e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003090:	e106      	b.n	80032a0 <UART_SetConfig+0x4d8>
 8003092:	bf00      	nop
 8003094:	40011000 	.word	0x40011000
 8003098:	40011400 	.word	0x40011400
 800309c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030b2:	4642      	mov	r2, r8
 80030b4:	464b      	mov	r3, r9
 80030b6:	1891      	adds	r1, r2, r2
 80030b8:	6239      	str	r1, [r7, #32]
 80030ba:	415b      	adcs	r3, r3
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030c2:	4641      	mov	r1, r8
 80030c4:	1854      	adds	r4, r2, r1
 80030c6:	4649      	mov	r1, r9
 80030c8:	eb43 0501 	adc.w	r5, r3, r1
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030e8:	464b      	mov	r3, r9
 80030ea:	eb45 0303 	adc.w	r3, r5, r3
 80030ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800310e:	4629      	mov	r1, r5
 8003110:	008b      	lsls	r3, r1, #2
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003118:	4621      	mov	r1, r4
 800311a:	008a      	lsls	r2, r1, #2
 800311c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003120:	f7fd f8ae 	bl	8000280 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4b60      	ldr	r3, [pc, #384]	@ (80032ac <UART_SetConfig+0x4e4>)
 800312a:	fba3 2302 	umull	r2, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	011c      	lsls	r4, r3, #4
 8003132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800313c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003144:	4642      	mov	r2, r8
 8003146:	464b      	mov	r3, r9
 8003148:	1891      	adds	r1, r2, r2
 800314a:	61b9      	str	r1, [r7, #24]
 800314c:	415b      	adcs	r3, r3
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003154:	4641      	mov	r1, r8
 8003156:	1851      	adds	r1, r2, r1
 8003158:	6139      	str	r1, [r7, #16]
 800315a:	4649      	mov	r1, r9
 800315c:	414b      	adcs	r3, r1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800316c:	4659      	mov	r1, fp
 800316e:	00cb      	lsls	r3, r1, #3
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003176:	4651      	mov	r1, sl
 8003178:	00ca      	lsls	r2, r1, #3
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	4603      	mov	r3, r0
 8003180:	4642      	mov	r2, r8
 8003182:	189b      	adds	r3, r3, r2
 8003184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003188:	464b      	mov	r3, r9
 800318a:	460a      	mov	r2, r1
 800318c:	eb42 0303 	adc.w	r3, r2, r3
 8003190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800319e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031ac:	4649      	mov	r1, r9
 80031ae:	008b      	lsls	r3, r1, #2
 80031b0:	4641      	mov	r1, r8
 80031b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b6:	4641      	mov	r1, r8
 80031b8:	008a      	lsls	r2, r1, #2
 80031ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031be:	f7fd f85f 	bl	8000280 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <UART_SetConfig+0x4e4>)
 80031ca:	fba3 2301 	umull	r2, r3, r3, r1
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2264      	movs	r2, #100	@ 0x64
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	1acb      	subs	r3, r1, r3
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	3332      	adds	r3, #50	@ 0x32
 80031dc:	4a33      	ldr	r2, [pc, #204]	@ (80032ac <UART_SetConfig+0x4e4>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e8:	441c      	add	r4, r3
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80031f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80031f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	1891      	adds	r1, r2, r2
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	415b      	adcs	r3, r3
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003208:	4641      	mov	r1, r8
 800320a:	1851      	adds	r1, r2, r1
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	4649      	mov	r1, r9
 8003210:	414b      	adcs	r3, r1
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003220:	4659      	mov	r1, fp
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4651      	mov	r1, sl
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4642      	mov	r2, r8
 8003236:	189b      	adds	r3, r3, r2
 8003238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800323a:	464b      	mov	r3, r9
 800323c:	460a      	mov	r2, r1
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	663b      	str	r3, [r7, #96]	@ 0x60
 800324e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800325c:	4649      	mov	r1, r9
 800325e:	008b      	lsls	r3, r1, #2
 8003260:	4641      	mov	r1, r8
 8003262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003266:	4641      	mov	r1, r8
 8003268:	008a      	lsls	r2, r1, #2
 800326a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800326e:	f7fd f807 	bl	8000280 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <UART_SetConfig+0x4e4>)
 8003278:	fba3 1302 	umull	r1, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2164      	movs	r1, #100	@ 0x64
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	3332      	adds	r3, #50	@ 0x32
 800328a:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <UART_SetConfig+0x4e4>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4422      	add	r2, r4
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032a6:	46bd      	mov	sp, r7
 80032a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ac:	51eb851f 	.word	0x51eb851f

080032b0 <_ZN11TimeManager11getTimeSpanEv>:

	/*
	 * Returns an instance of a TimeSpan
	 * return value: TimeSpan struct instance
	 */
	TimeSpan getTimeSpan() { return passage_of_time_;}
 80032b0:	b4b0      	push	{r4, r5, r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	6811      	ldr	r1, [r2, #0]
 80032c0:	6855      	ldr	r5, [r2, #4]
 80032c2:	6894      	ldr	r4, [r2, #8]
 80032c4:	68d0      	ldr	r0, [r2, #12]
 80032c6:	6019      	str	r1, [r3, #0]
 80032c8:	605d      	str	r5, [r3, #4]
 80032ca:	609c      	str	r4, [r3, #8]
 80032cc:	60d8      	str	r0, [r3, #12]
 80032ce:	6911      	ldr	r1, [r2, #16]
 80032d0:	6119      	str	r1, [r3, #16]
 80032d2:	7d12      	ldrb	r2, [r2, #20]
 80032d4:	751a      	strb	r2, [r3, #20]
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bcb0      	pop	{r4, r5, r7}
 80032de:	4770      	bx	lr

080032e0 <_ZN8Time_RTCC1EP17I2C_HandleTypeDefbhhhhhhh>:
 *      Author: Fola Fatola
 */

#include "rtc.hpp"

Time_RTC::Time_RTC(I2C_HandleTypeDef *i2c_handle, bool use_twenty_four_hour_time,
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b08b      	sub	sp, #44	@ 0x2c
 80032e4:	af06      	add	r7, sp, #24
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	460b      	mov	r3, r1
 80032f0:	71fb      	strb	r3, [r7, #7]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71bb      	strb	r3, [r7, #6]
		uint8_t seconds, uint8_t minutes,
		uint8_t hours, uint8_t week_day,
		uint8_t date_day, uint8_t month, uint8_t year) :
	i2c_handle_{i2c_handle}, twenty_four_hour_time{use_twenty_four_hour_time},
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	79fa      	ldrb	r2, [r7, #7]
 8003300:	711a      	strb	r2, [r3, #4]
	tim_manager_{TimeManager(seconds, minutes, hours, week_day, date_day, month, year, use_twenty_four_hour_time)}{}
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1d58      	adds	r0, r3, #5
 8003306:	f897 4024 	ldrb.w	r4, [r7, #36]	@ 0x24
 800330a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800330e:	79b9      	ldrb	r1, [r7, #6]
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003318:	9303      	str	r3, [sp, #12]
 800331a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4623      	mov	r3, r4
 800332e:	f000 f987 	bl	8003640 <_ZN11TimeManagerC1Ehhhhhhhb>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bd90      	pop	{r4, r7, pc}

0800333c <_ZN8Time_RTC13rtc_write_regEhPh>:

RTC_Status_E Time_RTC::rtc_write_reg(uint8_t register_address, uint8_t *transmit_data) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af04      	add	r7, sp, #16
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	72fb      	strb	r3, [r7, #11]
	if (i2c_handle_ == nullptr) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <_ZN8Time_RTC13rtc_write_regEhPh+0x1a>
		return RTC_NULL_I2C_HANDLE;
 8003352:	2301      	movs	r3, #1
 8003354:	e018      	b.n	8003388 <_ZN8Time_RTC13rtc_write_regEhPh+0x4c>
	}

	if (HAL_I2C_Mem_Write(i2c_handle_, DEVICE_ADDR, register_address, MEM_ADDR_SIZE, transmit_data, 1, TIMEOUT) != HAL_OK) {
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	b29a      	uxth	r2, r3
 800335e:	2364      	movs	r3, #100	@ 0x64
 8003360:	9302      	str	r3, [sp, #8]
 8003362:	2301      	movs	r3, #1
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	21d0      	movs	r1, #208	@ 0xd0
 800336e:	f7fe f85b 	bl	8001428 <HAL_I2C_Mem_Write>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <_ZN8Time_RTC13rtc_write_regEhPh+0x4a>
		return RTC_INIT_FAIL;
 8003382:	2302      	movs	r3, #2
 8003384:	e000      	b.n	8003388 <_ZN8Time_RTC13rtc_write_regEhPh+0x4c>
	}

	return RTC_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZN8Time_RTC12rtc_read_regEhPh>:

RTC_Status_E Time_RTC::rtc_read_reg(uint8_t register_address, uint8_t *recv_data) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af04      	add	r7, sp, #16
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	460b      	mov	r3, r1
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	72fb      	strb	r3, [r7, #11]
	if (i2c_handle_ == nullptr) {
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <_ZN8Time_RTC12rtc_read_regEhPh+0x1a>
		return RTC_NULL_I2C_HANDLE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e018      	b.n	80033dc <_ZN8Time_RTC12rtc_read_regEhPh+0x4c>
	}

	if (HAL_I2C_Mem_Read(i2c_handle_, DEVICE_ADDR, register_address, MEM_ADDR_SIZE, recv_data, 1, TIMEOUT) != HAL_OK) {
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	2364      	movs	r3, #100	@ 0x64
 80033b4:	9302      	str	r3, [sp, #8]
 80033b6:	2301      	movs	r3, #1
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2301      	movs	r3, #1
 80033c0:	21d0      	movs	r1, #208	@ 0xd0
 80033c2:	f7fe f92b 	bl	800161c <HAL_I2C_Mem_Read>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <_ZN8Time_RTC12rtc_read_regEhPh+0x4a>
		return RTC_INIT_FAIL;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e000      	b.n	80033dc <_ZN8Time_RTC12rtc_read_regEhPh+0x4c>
	}

	return RTC_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_ZN8Time_RTC8rtc_initEv>:


RTC_Status_E Time_RTC::rtc_init() {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b092      	sub	sp, #72	@ 0x48
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	RTC_Status_E status = RTC_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	//rtc register stores data in bcd format.
	status = tim_manager_.convert_decimal_time_to_bcd();
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3305      	adds	r3, #5
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f9c6 	bl	8003788 <_ZN11TimeManager27convert_decimal_time_to_bcdEv>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (status != RTC_OK) {
 8003402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <_ZN8Time_RTC8rtc_initEv+0x2c>
		return status;
 800340a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800340e:	e066      	b.n	80034de <_ZN8Time_RTC8rtc_initEv+0xfa>
	}

	TimeSpan time_span = tim_manager_.getTimeSpan();
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1d5a      	adds	r2, r3, #5
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff48 	bl	80032b0 <_ZN11TimeManager11getTimeSpanEv>

	//fetch the initial values for each of the units of time.
	//Each value of time will be written to a register corresponding to its unit.
	uint8_t seconds = time_span.seconds_.time_value;
 8003420:	7f7b      	ldrb	r3, [r7, #29]
 8003422:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t minutes = time_span.minutes_.time_value;
 8003426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800342a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t hours = time_span.hours_.time_value;
 800342e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003432:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t date_day = time_span.date_day_.time_value;
 8003436:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800343a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t week_day = time_span.week_day_.time_value;
 800343e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003442:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t month = time_span.month_.time_value;
 8003446:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800344a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint8_t year = time_span.year_.time_value;
 800344e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003452:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

	uint8_t bcd_time[7] = {seconds, minutes, hours,
			date_day, week_day, month, year};
 8003456:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800345a:	753b      	strb	r3, [r7, #20]
 800345c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003460:	757b      	strb	r3, [r7, #21]
 8003462:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003466:	75bb      	strb	r3, [r7, #22]
 8003468:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800346c:	75fb      	strb	r3, [r7, #23]
 800346e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003472:	763b      	strb	r3, [r7, #24]
 8003474:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003478:	767b      	strb	r3, [r7, #25]
 800347a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800347e:	76bb      	strb	r3, [r7, #26]

	uint8_t time_registers[7] = {SECONDS_REG, MINUTES_REG, HOURS_REG,
 8003480:	4a19      	ldr	r2, [pc, #100]	@ (80034e8 <_ZN8Time_RTC8rtc_initEv+0x104>)
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800348a:	6018      	str	r0, [r3, #0]
 800348c:	3304      	adds	r3, #4
 800348e:	8019      	strh	r1, [r3, #0]
 8003490:	3302      	adds	r3, #2
 8003492:	0c0a      	lsrs	r2, r1, #16
 8003494:	701a      	strb	r2, [r3, #0]
			WEEK_DAY_REG, DATE_DAY_REG, MONTH_REG, YEAR_REG};

	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 8003496:	2300      	movs	r3, #0
 8003498:	643b      	str	r3, [r7, #64]	@ 0x40
 800349a:	e01b      	b.n	80034d4 <_ZN8Time_RTC8rtc_initEv+0xf0>
		uint8_t *p_transmit = &(bcd_time[time_unit_idx]);
 800349c:	f107 0214 	add.w	r2, r7, #20
 80034a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a2:	4413      	add	r3, r2
 80034a4:	637b      	str	r3, [r7, #52]	@ 0x34
		//write the time values to the time registers.
		status = rtc_write_reg(time_registers[time_unit_idx], p_transmit);
 80034a6:	f107 020c 	add.w	r2, r7, #12
 80034aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ac:	4413      	add	r3, r2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff41 	bl	800333c <_ZN8Time_RTC13rtc_write_regEhPh>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (status != RTC_OK) {			//if the write fails, return error code.
 80034c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <_ZN8Time_RTC8rtc_initEv+0xea>
			return status;
 80034c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034cc:	e007      	b.n	80034de <_ZN8Time_RTC8rtc_initEv+0xfa>
	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 80034ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d0:	3301      	adds	r3, #1
 80034d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	dde0      	ble.n	800349c <_ZN8Time_RTC8rtc_initEv+0xb8>
		}
	}

	return status;
 80034da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3748      	adds	r7, #72	@ 0x48
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	080042d8 	.word	0x080042d8

080034ec <_ZN8Time_RTC16rtc_get_all_timeEv>:

RTC_Status_E Time_RTC::rtc_get_all_time() {
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	b08d      	sub	sp, #52	@ 0x34
 80034f0:	af04      	add	r7, sp, #16
 80034f2:	6078      	str	r0, [r7, #4]
	uint8_t time_registers[7] = {SECONDS_REG, MINUTES_REG, HOURS_REG,
 80034f4:	4a23      	ldr	r2, [pc, #140]	@ (8003584 <_ZN8Time_RTC16rtc_get_all_timeEv+0x98>)
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034fe:	6018      	str	r0, [r3, #0]
 8003500:	3304      	adds	r3, #4
 8003502:	8019      	strh	r1, [r3, #0]
 8003504:	3302      	adds	r3, #2
 8003506:	0c0a      	lsrs	r2, r1, #16
 8003508:	701a      	strb	r2, [r3, #0]
				WEEK_DAY_REG, DATE_DAY_REG, MONTH_REG, YEAR_REG};

	uint8_t time_unit_values[7];

	RTC_Status_E status = RTC_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	76fb      	strb	r3, [r7, #27]

	//get all time unit values (BCD format) from RTC registers.
	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e016      	b.n	8003542 <_ZN8Time_RTC16rtc_get_all_timeEv+0x56>
		status = rtc_read_reg(time_registers[time_unit_idx], &time_unit_values[time_unit_idx]);
 8003514:	f107 0214 	add.w	r2, r7, #20
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	7819      	ldrb	r1, [r3, #0]
 800351e:	f107 020c 	add.w	r2, r7, #12
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	461a      	mov	r2, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff31 	bl	8003390 <_ZN8Time_RTC12rtc_read_regEhPh>
 800352e:	4603      	mov	r3, r0
 8003530:	76fb      	strb	r3, [r7, #27]
		if (status != RTC_OK) {	//If read fails for some reason, abort.
 8003532:	7efb      	ldrb	r3, [r7, #27]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZN8Time_RTC16rtc_get_all_timeEv+0x50>
			return status;
 8003538:	7efb      	ldrb	r3, [r7, #27]
 800353a:	e01f      	b.n	800357c <_ZN8Time_RTC16rtc_get_all_timeEv+0x90>
	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3301      	adds	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b06      	cmp	r3, #6
 8003546:	dde5      	ble.n	8003514 <_ZN8Time_RTC16rtc_get_all_timeEv+0x28>
		}
	}

	//set the time units inside the timer manager.
	tim_manager_.setTime(time_unit_values[0], time_unit_values[1], time_unit_values[2],
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	1d5c      	adds	r4, r3, #5
 800354c:	7b3d      	ldrb	r5, [r7, #12]
 800354e:	7b7e      	ldrb	r6, [r7, #13]
 8003550:	f897 c00e 	ldrb.w	ip, [r7, #14]
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	7c3a      	ldrb	r2, [r7, #16]
 8003558:	7c79      	ldrb	r1, [r7, #17]
 800355a:	7cb8      	ldrb	r0, [r7, #18]
 800355c:	9003      	str	r0, [sp, #12]
 800355e:	9102      	str	r1, [sp, #8]
 8003560:	9201      	str	r2, [sp, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4663      	mov	r3, ip
 8003566:	4632      	mov	r2, r6
 8003568:	4629      	mov	r1, r5
 800356a:	4620      	mov	r0, r4
 800356c:	f000 f8e3 	bl	8003736 <_ZN11TimeManager7setTimeEhhhhhhh>
			time_unit_values[3], time_unit_values[4], time_unit_values[5], time_unit_values[6]);
	tim_manager_.convert_bcd_time_to_decimal();		//convert bcd time to decimal to return to the user.
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3305      	adds	r3, #5
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f989 	bl	800388c <_ZN11TimeManager27convert_bcd_time_to_decimalEv>

	return RTC_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3724      	adds	r7, #36	@ 0x24
 8003580:	46bd      	mov	sp, r7
 8003582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003584:	080042d8 	.word	0x080042d8

08003588 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh>:


RTC_Status_E Time_RTC::rtc_get_time_unit(Time_Type_E time_unit, uint8_t &time_value) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	460b      	mov	r3, r1
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	72fb      	strb	r3, [r7, #11]
	RTC_Status_E status = RTC_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	status = rtc_get_all_time();
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff ffa5 	bl	80034ec <_ZN8Time_RTC16rtc_get_all_timeEv>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != RTC_OK) {			//Register read failed somehow.
 80035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0x2e>
		return status;
 80035b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b4:	e03f      	b.n	8003636 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xae>
	}

	TimeSpan time_span = tim_manager_.getTimeSpan();
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1d5a      	adds	r2, r3, #5
 80035ba:	f107 0310 	add.w	r3, r7, #16
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fe75 	bl	80032b0 <_ZN11TimeManager11getTimeSpanEv>
	time_value = time_span.seconds_.time_value;
 80035c6:	7c7a      	ldrb	r2, [r7, #17]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	701a      	strb	r2, [r3, #0]

	switch (time_unit) {
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d82e      	bhi.n	8003630 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xa8>
 80035d2:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0x50>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	080035f5 	.word	0x080035f5
 80035dc:	080035fd 	.word	0x080035fd
 80035e0:	08003605 	.word	0x08003605
 80035e4:	08003615 	.word	0x08003615
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	0800361d 	.word	0x0800361d
 80035f0:	08003627 	.word	0x08003627
		case SECONDS: {
			time_value = time_span.seconds_.time_value;
 80035f4:	7c7a      	ldrb	r2, [r7, #17]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	701a      	strb	r2, [r3, #0]
			break;
 80035fa:	e01a      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		case MINUTES: {
			time_value = time_span.minutes_.time_value;
 80035fc:	7d3a      	ldrb	r2, [r7, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	701a      	strb	r2, [r3, #0]
			break;
 8003602:	e016      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		case HOURS: {
			time_value = time_span.hours_.time_value;
 8003604:	7dfa      	ldrb	r2, [r7, #23]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	701a      	strb	r2, [r3, #0]
			break;
 800360a:	e012      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		case DATE_DAY: {
			time_value = time_span.date_day_.time_value;
 800360c:	7f7a      	ldrb	r2, [r7, #29]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	701a      	strb	r2, [r3, #0]
			break;
 8003612:	e00e      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		case WEEK_DAY: {
			time_value = time_span.week_day_.time_value;
 8003614:	7eba      	ldrb	r2, [r7, #26]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	701a      	strb	r2, [r3, #0]
			break;
 800361a:	e00a      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		case MONTH: {
			time_value = time_span.month_.time_value;
 800361c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	701a      	strb	r2, [r3, #0]
			break;
 8003624:	e005      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		case YEAR: {
			time_value = time_span.year_.time_value;
 8003626:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	701a      	strb	r2, [r3, #0]
			break;
 800362e:	e000      	b.n	8003632 <_ZN8Time_RTC17rtc_get_time_unitE11Time_Type_ERh+0xaa>
		}
		default: {
			break;
 8003630:	bf00      	nop
		}
	};

	return status;
 8003632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003636:	4618      	mov	r0, r3
 8003638:	3728      	adds	r7, #40	@ 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <_ZN11TimeManagerC1Ehhhhhhhb>:

#include "timeunit.hpp"
#include <climits>


TimeManager::TimeManager(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t week_day, uint8_t date_day, uint8_t month, uint8_t year, bool use_twenty_four_hour_time) {
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	70fb      	strb	r3, [r7, #3]
 8003652:	460b      	mov	r3, r1
 8003654:	70bb      	strb	r3, [r7, #2]
 8003656:	4613      	mov	r3, r2
 8003658:	707b      	strb	r3, [r7, #1]
	passage_of_time_.seconds_.time_type = SECONDS;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
	passage_of_time_.seconds_.time_value = seconds;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	705a      	strb	r2, [r3, #1]
	passage_of_time_.seconds_.max_time = 60;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223c      	movs	r2, #60	@ 0x3c
 800366a:	709a      	strb	r2, [r3, #2]

	passage_of_time_.minutes_.time_type = MINUTES;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	70da      	strb	r2, [r3, #3]
	passage_of_time_.minutes_.time_value = minutes;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	78ba      	ldrb	r2, [r7, #2]
 8003676:	711a      	strb	r2, [r3, #4]
	passage_of_time_.minutes_.max_time = 60;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	223c      	movs	r2, #60	@ 0x3c
 800367c:	715a      	strb	r2, [r3, #5]

	passage_of_time_.hours_.time_type = HOURS;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	719a      	strb	r2, [r3, #6]
	passage_of_time_.hours_.time_value = hours;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	787a      	ldrb	r2, [r7, #1]
 8003688:	71da      	strb	r2, [r3, #7]

	if (use_twenty_four_hour_time) {
 800368a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <_ZN11TimeManagerC1Ehhhhhhhb+0x5a>
		passage_of_time_.hours_.max_time = 24;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2218      	movs	r2, #24
 8003696:	721a      	strb	r2, [r3, #8]
 8003698:	e002      	b.n	80036a0 <_ZN11TimeManagerC1Ehhhhhhhb+0x60>
	} else {
		passage_of_time_.hours_.max_time = 12;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	220c      	movs	r2, #12
 800369e:	721a      	strb	r2, [r3, #8]
	}

	passage_of_time_.week_day_.time_type = WEEK_DAY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2203      	movs	r2, #3
 80036a4:	725a      	strb	r2, [r3, #9]
	passage_of_time_.week_day_.time_value = week_day;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7c3a      	ldrb	r2, [r7, #16]
 80036aa:	729a      	strb	r2, [r3, #10]
	passage_of_time_.week_day_.max_time = 7;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2207      	movs	r2, #7
 80036b0:	72da      	strb	r2, [r3, #11]

	passage_of_time_.month_.time_type = MONTH;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2205      	movs	r2, #5
 80036b6:	73da      	strb	r2, [r3, #15]
	passage_of_time_.month_.time_value = month;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e3a      	ldrb	r2, [r7, #24]
 80036bc:	741a      	strb	r2, [r3, #16]
	passage_of_time_.month_.max_time = 12;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	220c      	movs	r2, #12
 80036c2:	745a      	strb	r2, [r3, #17]


	passage_of_time_.date_day_.time_type = DATE_DAY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2204      	movs	r2, #4
 80036c8:	731a      	strb	r2, [r3, #12]
	passage_of_time_.date_day_.time_value = date_day;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7d3a      	ldrb	r2, [r7, #20]
 80036ce:	735a      	strb	r2, [r3, #13]

	if (month == JANUARY || month == MARCH
 80036d0:	7e3b      	ldrb	r3, [r7, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d011      	beq.n	80036fa <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 80036d6:	7e3b      	ldrb	r3, [r7, #24]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d00e      	beq.n	80036fa <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
	 || month == MAY || month == JULY || month == AUGUST
 80036dc:	7e3b      	ldrb	r3, [r7, #24]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d00b      	beq.n	80036fa <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 80036e2:	7e3b      	ldrb	r3, [r7, #24]
 80036e4:	2b07      	cmp	r3, #7
 80036e6:	d008      	beq.n	80036fa <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 80036e8:	7e3b      	ldrb	r3, [r7, #24]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d005      	beq.n	80036fa <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
	 || month == OCTOBER || month == DECEMBER){
 80036ee:	7e3b      	ldrb	r3, [r7, #24]
 80036f0:	2b0a      	cmp	r3, #10
 80036f2:	d002      	beq.n	80036fa <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 80036f4:	7e3b      	ldrb	r3, [r7, #24]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d103      	bne.n	8003702 <_ZN11TimeManagerC1Ehhhhhhhb+0xc2>
		passage_of_time_.date_day_.max_time = 31;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	221f      	movs	r2, #31
 80036fe:	739a      	strb	r2, [r3, #14]
 8003700:	e009      	b.n	8003716 <_ZN11TimeManagerC1Ehhhhhhhb+0xd6>
	} else if (month == FEBRUARY) {							//We are NOT, doing leap year
 8003702:	7e3b      	ldrb	r3, [r7, #24]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d103      	bne.n	8003710 <_ZN11TimeManagerC1Ehhhhhhhb+0xd0>
		passage_of_time_.date_day_.max_time = 28;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	221c      	movs	r2, #28
 800370c:	739a      	strb	r2, [r3, #14]
 800370e:	e002      	b.n	8003716 <_ZN11TimeManagerC1Ehhhhhhhb+0xd6>
	} else {
		passage_of_time_.date_day_.max_time = 30;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	221e      	movs	r2, #30
 8003714:	739a      	strb	r2, [r3, #14]
	}

	passage_of_time_.year_.time_type = YEAR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2206      	movs	r2, #6
 800371a:	749a      	strb	r2, [r3, #18]
	passage_of_time_.year_.time_value = year;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7f3a      	ldrb	r2, [r7, #28]
 8003720:	74da      	strb	r2, [r3, #19]
	passage_of_time_.year_.max_time = 99;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2263      	movs	r2, #99	@ 0x63
 8003726:	751a      	strb	r2, [r3, #20]
}
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_ZN11TimeManager7setTimeEhhhhhhh>:


void TimeManager::setTime(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t week_day, uint8_t date_day, uint8_t month, uint8_t year) {
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	461a      	mov	r2, r3
 8003744:	4603      	mov	r3, r0
 8003746:	70fb      	strb	r3, [r7, #3]
 8003748:	460b      	mov	r3, r1
 800374a:	70bb      	strb	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	707b      	strb	r3, [r7, #1]
	passage_of_time_.seconds_.time_value = seconds;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	705a      	strb	r2, [r3, #1]
	passage_of_time_.minutes_.time_value = minutes;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	78ba      	ldrb	r2, [r7, #2]
 800375a:	711a      	strb	r2, [r3, #4]
	passage_of_time_.hours_.time_value = hours;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	787a      	ldrb	r2, [r7, #1]
 8003760:	71da      	strb	r2, [r3, #7]
	passage_of_time_.week_day_.time_value = week_day;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7c3a      	ldrb	r2, [r7, #16]
 8003766:	729a      	strb	r2, [r3, #10]
	passage_of_time_.date_day_.time_value = date_day;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7d3a      	ldrb	r2, [r7, #20]
 800376c:	735a      	strb	r2, [r3, #13]
	passage_of_time_.month_.time_value = month;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7e3a      	ldrb	r2, [r7, #24]
 8003772:	741a      	strb	r2, [r3, #16]
	passage_of_time_.year_.time_value = year;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7f3a      	ldrb	r2, [r7, #28]
 8003778:	74da      	strb	r2, [r3, #19]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <_ZN11TimeManager27convert_decimal_time_to_bcdEv>:

RTC_Status_E TimeManager::convert_decimal_time_to_bcd() {
 8003788:	b480      	push	{r7}
 800378a:	b08d      	sub	sp, #52	@ 0x34
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003790:	687b      	ldr	r3, [r7, #4]
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 8003792:	60fb      	str	r3, [r7, #12]
	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3303      	adds	r3, #3
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 8003798:	613b      	str	r3, [r7, #16]
	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3306      	adds	r3, #6
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3309      	adds	r3, #9
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	330c      	adds	r3, #12
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	330f      	adds	r3, #15
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3312      	adds	r3, #18
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037bc:	e05a      	b.n	8003874 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0xec>
    	if (decimal_time[tim_unit_idx]->time_value > decimal_time[tim_unit_idx]->max_time) {
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	3330      	adds	r3, #48	@ 0x30
 80037c4:	443b      	add	r3, r7
 80037c6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80037ca:	785a      	ldrb	r2, [r3, #1]
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3330      	adds	r3, #48	@ 0x30
 80037d2:	443b      	add	r3, r7
 80037d4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80037d8:	789b      	ldrb	r3, [r3, #2]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d901      	bls.n	80037e2 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x5a>
    		return RTC_DATA_TOO_LARGE;
 80037de:	2304      	movs	r3, #4
 80037e0:	e04c      	b.n	800387c <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0xf4>
    	}

    	//TODO: add century and millenia calculations.
    	uint8_t ones = decimal_time[tim_unit_idx]->time_value % 10;
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	3330      	adds	r3, #48	@ 0x30
 80037e8:	443b      	add	r3, r7
 80037ea:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80037ee:	785a      	ldrb	r2, [r3, #1]
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 80037f2:	fba3 1302 	umull	r1, r3, r3, r2
 80037f6:	08d9      	lsrs	r1, r3, #3
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		decimal_time[tim_unit_idx]->time_value /= 10;
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	3330      	adds	r3, #48	@ 0x30
 800380c:	443b      	add	r3, r7
 800380e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003812:	785a      	ldrb	r2, [r3, #1]
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3330      	adds	r3, #48	@ 0x30
 800381a:	443b      	add	r3, r7
 800381c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003820:	4919      	ldr	r1, [pc, #100]	@ (8003888 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 8003822:	fba1 1202 	umull	r1, r2, r1, r2
 8003826:	08d2      	lsrs	r2, r2, #3
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	705a      	strb	r2, [r3, #1]
		uint8_t tens = decimal_time[tim_unit_idx]->time_value % 10;
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3330      	adds	r3, #48	@ 0x30
 8003832:	443b      	add	r3, r7
 8003834:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003838:	785a      	ldrb	r2, [r3, #1]
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 800383c:	fba3 1302 	umull	r1, r3, r3, r2
 8003840:	08d9      	lsrs	r1, r3, #3
 8003842:	460b      	mov	r3, r1
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		decimal_time[tim_unit_idx]->time_value = ones + (tens << 4);
 8003850:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	b2d9      	uxtb	r1, r3
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	3330      	adds	r3, #48	@ 0x30
 800385e:	443b      	add	r3, r7
 8003860:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003864:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003868:	440a      	add	r2, r1
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	705a      	strb	r2, [r3, #1]
    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	3301      	adds	r3, #1
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	2b06      	cmp	r3, #6
 8003878:	dda1      	ble.n	80037be <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x36>
    }

    return RTC_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3734      	adds	r7, #52	@ 0x34
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	cccccccd 	.word	0xcccccccd

0800388c <_ZN11TimeManager27convert_bcd_time_to_decimalEv>:

RTC_Status_E TimeManager::convert_bcd_time_to_decimal() {
 800388c:	b480      	push	{r7}
 800388e:	b08d      	sub	sp, #52	@ 0x34
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

    TimeUnit* bcd_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003894:	687b      	ldr	r3, [r7, #4]
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 8003896:	60fb      	str	r3, [r7, #12]
    TimeUnit* bcd_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3303      	adds	r3, #3
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 800389c:	613b      	str	r3, [r7, #16]
    TimeUnit* bcd_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3306      	adds	r3, #6
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3309      	adds	r3, #9
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	330c      	adds	r3, #12
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	330f      	adds	r3, #15
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3312      	adds	r3, #18
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c0:	e029      	b.n	8003916 <_ZN11TimeManager27convert_bcd_time_to_decimalEv+0x8a>
    	uint8_t ones = bcd_time[tim_unit_idx]->time_value & 0x0F;
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3330      	adds	r3, #48	@ 0x30
 80038c8:	443b      	add	r3, r7
 80038ca:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    	uint8_t tens = (bcd_time[tim_unit_idx]->time_value & 0xF0) >> 4;
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3330      	adds	r3, #48	@ 0x30
 80038de:	443b      	add	r3, r7
 80038e0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    	bcd_time[tim_unit_idx]->time_value = tens * 10 + ones;
 80038ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80038f0:	461a      	mov	r2, r3
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	b2d9      	uxtb	r1, r3
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	3330      	adds	r3, #48	@ 0x30
 8003900:	443b      	add	r3, r7
 8003902:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003906:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800390a:	440a      	add	r2, r1
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	705a      	strb	r2, [r3, #1]
    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	3301      	adds	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003918:	2b06      	cmp	r3, #6
 800391a:	ddd2      	ble.n	80038c2 <_ZN11TimeManager27convert_bcd_time_to_decimalEv+0x36>
    }

    return RTC_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3734      	adds	r7, #52	@ 0x34
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <siprintf>:
 800392c:	b40e      	push	{r1, r2, r3}
 800392e:	b500      	push	{lr}
 8003930:	b09c      	sub	sp, #112	@ 0x70
 8003932:	ab1d      	add	r3, sp, #116	@ 0x74
 8003934:	9002      	str	r0, [sp, #8]
 8003936:	9006      	str	r0, [sp, #24]
 8003938:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800393c:	4809      	ldr	r0, [pc, #36]	@ (8003964 <siprintf+0x38>)
 800393e:	9107      	str	r1, [sp, #28]
 8003940:	9104      	str	r1, [sp, #16]
 8003942:	4909      	ldr	r1, [pc, #36]	@ (8003968 <siprintf+0x3c>)
 8003944:	f853 2b04 	ldr.w	r2, [r3], #4
 8003948:	9105      	str	r1, [sp, #20]
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	a902      	add	r1, sp, #8
 8003950:	f000 f89c 	bl	8003a8c <_svfiprintf_r>
 8003954:	9b02      	ldr	r3, [sp, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	b01c      	add	sp, #112	@ 0x70
 800395c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003960:	b003      	add	sp, #12
 8003962:	4770      	bx	lr
 8003964:	2000000c 	.word	0x2000000c
 8003968:	ffff0208 	.word	0xffff0208

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <__errno>:
 800397c:	4b01      	ldr	r3, [pc, #4]	@ (8003984 <__errno+0x8>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	@ (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	@ (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	@ (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	@ (80039cc <__libc_init_array+0x44>)
 800399c:	f000 fc66 	bl	800426c <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08004334 	.word	0x08004334
 80039c4:	08004334 	.word	0x08004334
 80039c8:	08004334 	.word	0x08004334
 80039cc:	08004338 	.word	0x08004338

080039d0 <__retarget_lock_acquire_recursive>:
 80039d0:	4770      	bx	lr

080039d2 <__retarget_lock_release_recursive>:
 80039d2:	4770      	bx	lr

080039d4 <__ssputs_r>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	688e      	ldr	r6, [r1, #8]
 80039da:	461f      	mov	r7, r3
 80039dc:	42be      	cmp	r6, r7
 80039de:	680b      	ldr	r3, [r1, #0]
 80039e0:	4682      	mov	sl, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4690      	mov	r8, r2
 80039e6:	d82d      	bhi.n	8003a44 <__ssputs_r+0x70>
 80039e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039f0:	d026      	beq.n	8003a40 <__ssputs_r+0x6c>
 80039f2:	6965      	ldr	r5, [r4, #20]
 80039f4:	6909      	ldr	r1, [r1, #16]
 80039f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039fa:	eba3 0901 	sub.w	r9, r3, r1
 80039fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a02:	1c7b      	adds	r3, r7, #1
 8003a04:	444b      	add	r3, r9
 8003a06:	106d      	asrs	r5, r5, #1
 8003a08:	429d      	cmp	r5, r3
 8003a0a:	bf38      	it	cc
 8003a0c:	461d      	movcc	r5, r3
 8003a0e:	0553      	lsls	r3, r2, #21
 8003a10:	d527      	bpl.n	8003a62 <__ssputs_r+0x8e>
 8003a12:	4629      	mov	r1, r5
 8003a14:	f000 f958 	bl	8003cc8 <_malloc_r>
 8003a18:	4606      	mov	r6, r0
 8003a1a:	b360      	cbz	r0, 8003a76 <__ssputs_r+0xa2>
 8003a1c:	6921      	ldr	r1, [r4, #16]
 8003a1e:	464a      	mov	r2, r9
 8003a20:	f000 fbc4 	bl	80041ac <memcpy>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	6126      	str	r6, [r4, #16]
 8003a32:	6165      	str	r5, [r4, #20]
 8003a34:	444e      	add	r6, r9
 8003a36:	eba5 0509 	sub.w	r5, r5, r9
 8003a3a:	6026      	str	r6, [r4, #0]
 8003a3c:	60a5      	str	r5, [r4, #8]
 8003a3e:	463e      	mov	r6, r7
 8003a40:	42be      	cmp	r6, r7
 8003a42:	d900      	bls.n	8003a46 <__ssputs_r+0x72>
 8003a44:	463e      	mov	r6, r7
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	f000 fb84 	bl	8004158 <memmove>
 8003a50:	68a3      	ldr	r3, [r4, #8]
 8003a52:	1b9b      	subs	r3, r3, r6
 8003a54:	60a3      	str	r3, [r4, #8]
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	4433      	add	r3, r6
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a62:	462a      	mov	r2, r5
 8003a64:	f000 fb4a 	bl	80040fc <_realloc_r>
 8003a68:	4606      	mov	r6, r0
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d1e0      	bne.n	8003a30 <__ssputs_r+0x5c>
 8003a6e:	6921      	ldr	r1, [r4, #16]
 8003a70:	4650      	mov	r0, sl
 8003a72:	f000 fba9 	bl	80041c8 <_free_r>
 8003a76:	230c      	movs	r3, #12
 8003a78:	f8ca 3000 	str.w	r3, [sl]
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a88:	e7e9      	b.n	8003a5e <__ssputs_r+0x8a>
	...

08003a8c <_svfiprintf_r>:
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	4698      	mov	r8, r3
 8003a92:	898b      	ldrh	r3, [r1, #12]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	b09d      	sub	sp, #116	@ 0x74
 8003a98:	4607      	mov	r7, r0
 8003a9a:	460d      	mov	r5, r1
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	d510      	bpl.n	8003ac2 <_svfiprintf_r+0x36>
 8003aa0:	690b      	ldr	r3, [r1, #16]
 8003aa2:	b973      	cbnz	r3, 8003ac2 <_svfiprintf_r+0x36>
 8003aa4:	2140      	movs	r1, #64	@ 0x40
 8003aa6:	f000 f90f 	bl	8003cc8 <_malloc_r>
 8003aaa:	6028      	str	r0, [r5, #0]
 8003aac:	6128      	str	r0, [r5, #16]
 8003aae:	b930      	cbnz	r0, 8003abe <_svfiprintf_r+0x32>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab8:	b01d      	add	sp, #116	@ 0x74
 8003aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abe:	2340      	movs	r3, #64	@ 0x40
 8003ac0:	616b      	str	r3, [r5, #20]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad0:	2330      	movs	r3, #48	@ 0x30
 8003ad2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c70 <_svfiprintf_r+0x1e4>
 8003ad6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ada:	f04f 0901 	mov.w	r9, #1
 8003ade:	4623      	mov	r3, r4
 8003ae0:	469a      	mov	sl, r3
 8003ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae6:	b10a      	cbz	r2, 8003aec <_svfiprintf_r+0x60>
 8003ae8:	2a25      	cmp	r2, #37	@ 0x25
 8003aea:	d1f9      	bne.n	8003ae0 <_svfiprintf_r+0x54>
 8003aec:	ebba 0b04 	subs.w	fp, sl, r4
 8003af0:	d00b      	beq.n	8003b0a <_svfiprintf_r+0x7e>
 8003af2:	465b      	mov	r3, fp
 8003af4:	4622      	mov	r2, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7ff ff6b 	bl	80039d4 <__ssputs_r>
 8003afe:	3001      	adds	r0, #1
 8003b00:	f000 80a7 	beq.w	8003c52 <_svfiprintf_r+0x1c6>
 8003b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b06:	445a      	add	r2, fp
 8003b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 809f 	beq.w	8003c52 <_svfiprintf_r+0x1c6>
 8003b14:	2300      	movs	r3, #0
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b1e:	f10a 0a01 	add.w	sl, sl, #1
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	9307      	str	r3, [sp, #28]
 8003b26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b2c:	4654      	mov	r4, sl
 8003b2e:	2205      	movs	r2, #5
 8003b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b34:	484e      	ldr	r0, [pc, #312]	@ (8003c70 <_svfiprintf_r+0x1e4>)
 8003b36:	f7fc fb53 	bl	80001e0 <memchr>
 8003b3a:	9a04      	ldr	r2, [sp, #16]
 8003b3c:	b9d8      	cbnz	r0, 8003b76 <_svfiprintf_r+0xea>
 8003b3e:	06d0      	lsls	r0, r2, #27
 8003b40:	bf44      	itt	mi
 8003b42:	2320      	movmi	r3, #32
 8003b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b48:	0711      	lsls	r1, r2, #28
 8003b4a:	bf44      	itt	mi
 8003b4c:	232b      	movmi	r3, #43	@ 0x2b
 8003b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b52:	f89a 3000 	ldrb.w	r3, [sl]
 8003b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b58:	d015      	beq.n	8003b86 <_svfiprintf_r+0xfa>
 8003b5a:	9a07      	ldr	r2, [sp, #28]
 8003b5c:	4654      	mov	r4, sl
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f04f 0c0a 	mov.w	ip, #10
 8003b64:	4621      	mov	r1, r4
 8003b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b6a:	3b30      	subs	r3, #48	@ 0x30
 8003b6c:	2b09      	cmp	r3, #9
 8003b6e:	d94b      	bls.n	8003c08 <_svfiprintf_r+0x17c>
 8003b70:	b1b0      	cbz	r0, 8003ba0 <_svfiprintf_r+0x114>
 8003b72:	9207      	str	r2, [sp, #28]
 8003b74:	e014      	b.n	8003ba0 <_svfiprintf_r+0x114>
 8003b76:	eba0 0308 	sub.w	r3, r0, r8
 8003b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	46a2      	mov	sl, r4
 8003b84:	e7d2      	b.n	8003b2c <_svfiprintf_r+0xa0>
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	1d19      	adds	r1, r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	9103      	str	r1, [sp, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfbb      	ittet	lt
 8003b92:	425b      	neglt	r3, r3
 8003b94:	f042 0202 	orrlt.w	r2, r2, #2
 8003b98:	9307      	strge	r3, [sp, #28]
 8003b9a:	9307      	strlt	r3, [sp, #28]
 8003b9c:	bfb8      	it	lt
 8003b9e:	9204      	strlt	r2, [sp, #16]
 8003ba0:	7823      	ldrb	r3, [r4, #0]
 8003ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ba4:	d10a      	bne.n	8003bbc <_svfiprintf_r+0x130>
 8003ba6:	7863      	ldrb	r3, [r4, #1]
 8003ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003baa:	d132      	bne.n	8003c12 <_svfiprintf_r+0x186>
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	9203      	str	r2, [sp, #12]
 8003bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bb8:	3402      	adds	r4, #2
 8003bba:	9305      	str	r3, [sp, #20]
 8003bbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c80 <_svfiprintf_r+0x1f4>
 8003bc0:	7821      	ldrb	r1, [r4, #0]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	4650      	mov	r0, sl
 8003bc6:	f7fc fb0b 	bl	80001e0 <memchr>
 8003bca:	b138      	cbz	r0, 8003bdc <_svfiprintf_r+0x150>
 8003bcc:	9b04      	ldr	r3, [sp, #16]
 8003bce:	eba0 000a 	sub.w	r0, r0, sl
 8003bd2:	2240      	movs	r2, #64	@ 0x40
 8003bd4:	4082      	lsls	r2, r0
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	3401      	adds	r4, #1
 8003bda:	9304      	str	r3, [sp, #16]
 8003bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be0:	4824      	ldr	r0, [pc, #144]	@ (8003c74 <_svfiprintf_r+0x1e8>)
 8003be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003be6:	2206      	movs	r2, #6
 8003be8:	f7fc fafa 	bl	80001e0 <memchr>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d036      	beq.n	8003c5e <_svfiprintf_r+0x1d2>
 8003bf0:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <_svfiprintf_r+0x1ec>)
 8003bf2:	bb1b      	cbnz	r3, 8003c3c <_svfiprintf_r+0x1b0>
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	3307      	adds	r3, #7
 8003bf8:	f023 0307 	bic.w	r3, r3, #7
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	9303      	str	r3, [sp, #12]
 8003c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c02:	4433      	add	r3, r6
 8003c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c06:	e76a      	b.n	8003ade <_svfiprintf_r+0x52>
 8003c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	2001      	movs	r0, #1
 8003c10:	e7a8      	b.n	8003b64 <_svfiprintf_r+0xd8>
 8003c12:	2300      	movs	r3, #0
 8003c14:	3401      	adds	r4, #1
 8003c16:	9305      	str	r3, [sp, #20]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 0c0a 	mov.w	ip, #10
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c24:	3a30      	subs	r2, #48	@ 0x30
 8003c26:	2a09      	cmp	r2, #9
 8003c28:	d903      	bls.n	8003c32 <_svfiprintf_r+0x1a6>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0c6      	beq.n	8003bbc <_svfiprintf_r+0x130>
 8003c2e:	9105      	str	r1, [sp, #20]
 8003c30:	e7c4      	b.n	8003bbc <_svfiprintf_r+0x130>
 8003c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c36:	4604      	mov	r4, r0
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e7f0      	b.n	8003c1e <_svfiprintf_r+0x192>
 8003c3c:	ab03      	add	r3, sp, #12
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	462a      	mov	r2, r5
 8003c42:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <_svfiprintf_r+0x1f0>)
 8003c44:	a904      	add	r1, sp, #16
 8003c46:	4638      	mov	r0, r7
 8003c48:	f3af 8000 	nop.w
 8003c4c:	1c42      	adds	r2, r0, #1
 8003c4e:	4606      	mov	r6, r0
 8003c50:	d1d6      	bne.n	8003c00 <_svfiprintf_r+0x174>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	065b      	lsls	r3, r3, #25
 8003c56:	f53f af2d 	bmi.w	8003ab4 <_svfiprintf_r+0x28>
 8003c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c5c:	e72c      	b.n	8003ab8 <_svfiprintf_r+0x2c>
 8003c5e:	ab03      	add	r3, sp, #12
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	462a      	mov	r2, r5
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <_svfiprintf_r+0x1f0>)
 8003c66:	a904      	add	r1, sp, #16
 8003c68:	4638      	mov	r0, r7
 8003c6a:	f000 f91b 	bl	8003ea4 <_printf_i>
 8003c6e:	e7ed      	b.n	8003c4c <_svfiprintf_r+0x1c0>
 8003c70:	080042f8 	.word	0x080042f8
 8003c74:	08004302 	.word	0x08004302
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	080039d5 	.word	0x080039d5
 8003c80:	080042fe 	.word	0x080042fe

08003c84 <sbrk_aligned>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	4e0f      	ldr	r6, [pc, #60]	@ (8003cc4 <sbrk_aligned+0x40>)
 8003c88:	460c      	mov	r4, r1
 8003c8a:	6831      	ldr	r1, [r6, #0]
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	b911      	cbnz	r1, 8003c96 <sbrk_aligned+0x12>
 8003c90:	f000 fa7c 	bl	800418c <_sbrk_r>
 8003c94:	6030      	str	r0, [r6, #0]
 8003c96:	4621      	mov	r1, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f000 fa77 	bl	800418c <_sbrk_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	d103      	bne.n	8003caa <sbrk_aligned+0x26>
 8003ca2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
 8003caa:	1cc4      	adds	r4, r0, #3
 8003cac:	f024 0403 	bic.w	r4, r4, #3
 8003cb0:	42a0      	cmp	r0, r4
 8003cb2:	d0f8      	beq.n	8003ca6 <sbrk_aligned+0x22>
 8003cb4:	1a21      	subs	r1, r4, r0
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 fa68 	bl	800418c <_sbrk_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d1f2      	bne.n	8003ca6 <sbrk_aligned+0x22>
 8003cc0:	e7ef      	b.n	8003ca2 <sbrk_aligned+0x1e>
 8003cc2:	bf00      	nop
 8003cc4:	20000258 	.word	0x20000258

08003cc8 <_malloc_r>:
 8003cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ccc:	1ccd      	adds	r5, r1, #3
 8003cce:	f025 0503 	bic.w	r5, r5, #3
 8003cd2:	3508      	adds	r5, #8
 8003cd4:	2d0c      	cmp	r5, #12
 8003cd6:	bf38      	it	cc
 8003cd8:	250c      	movcc	r5, #12
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	4606      	mov	r6, r0
 8003cde:	db01      	blt.n	8003ce4 <_malloc_r+0x1c>
 8003ce0:	42a9      	cmp	r1, r5
 8003ce2:	d904      	bls.n	8003cee <_malloc_r+0x26>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	2000      	movs	r0, #0
 8003cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dc4 <_malloc_r+0xfc>
 8003cf2:	f000 f9f7 	bl	80040e4 <__malloc_lock>
 8003cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cfa:	461c      	mov	r4, r3
 8003cfc:	bb44      	cbnz	r4, 8003d50 <_malloc_r+0x88>
 8003cfe:	4629      	mov	r1, r5
 8003d00:	4630      	mov	r0, r6
 8003d02:	f7ff ffbf 	bl	8003c84 <sbrk_aligned>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	4604      	mov	r4, r0
 8003d0a:	d158      	bne.n	8003dbe <_malloc_r+0xf6>
 8003d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d10:	4627      	mov	r7, r4
 8003d12:	2f00      	cmp	r7, #0
 8003d14:	d143      	bne.n	8003d9e <_malloc_r+0xd6>
 8003d16:	2c00      	cmp	r4, #0
 8003d18:	d04b      	beq.n	8003db2 <_malloc_r+0xea>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	eb04 0903 	add.w	r9, r4, r3
 8003d24:	f000 fa32 	bl	800418c <_sbrk_r>
 8003d28:	4581      	cmp	r9, r0
 8003d2a:	d142      	bne.n	8003db2 <_malloc_r+0xea>
 8003d2c:	6821      	ldr	r1, [r4, #0]
 8003d2e:	1a6d      	subs	r5, r5, r1
 8003d30:	4629      	mov	r1, r5
 8003d32:	4630      	mov	r0, r6
 8003d34:	f7ff ffa6 	bl	8003c84 <sbrk_aligned>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d03a      	beq.n	8003db2 <_malloc_r+0xea>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	442b      	add	r3, r5
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	f8d8 3000 	ldr.w	r3, [r8]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	bb62      	cbnz	r2, 8003da4 <_malloc_r+0xdc>
 8003d4a:	f8c8 7000 	str.w	r7, [r8]
 8003d4e:	e00f      	b.n	8003d70 <_malloc_r+0xa8>
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	1b52      	subs	r2, r2, r5
 8003d54:	d420      	bmi.n	8003d98 <_malloc_r+0xd0>
 8003d56:	2a0b      	cmp	r2, #11
 8003d58:	d917      	bls.n	8003d8a <_malloc_r+0xc2>
 8003d5a:	1961      	adds	r1, r4, r5
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	6025      	str	r5, [r4, #0]
 8003d60:	bf18      	it	ne
 8003d62:	6059      	strne	r1, [r3, #4]
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	bf08      	it	eq
 8003d68:	f8c8 1000 	streq.w	r1, [r8]
 8003d6c:	5162      	str	r2, [r4, r5]
 8003d6e:	604b      	str	r3, [r1, #4]
 8003d70:	4630      	mov	r0, r6
 8003d72:	f000 f9bd 	bl	80040f0 <__malloc_unlock>
 8003d76:	f104 000b 	add.w	r0, r4, #11
 8003d7a:	1d23      	adds	r3, r4, #4
 8003d7c:	f020 0007 	bic.w	r0, r0, #7
 8003d80:	1ac2      	subs	r2, r0, r3
 8003d82:	bf1c      	itt	ne
 8003d84:	1a1b      	subne	r3, r3, r0
 8003d86:	50a3      	strne	r3, [r4, r2]
 8003d88:	e7af      	b.n	8003cea <_malloc_r+0x22>
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	bf0c      	ite	eq
 8003d90:	f8c8 2000 	streq.w	r2, [r8]
 8003d94:	605a      	strne	r2, [r3, #4]
 8003d96:	e7eb      	b.n	8003d70 <_malloc_r+0xa8>
 8003d98:	4623      	mov	r3, r4
 8003d9a:	6864      	ldr	r4, [r4, #4]
 8003d9c:	e7ae      	b.n	8003cfc <_malloc_r+0x34>
 8003d9e:	463c      	mov	r4, r7
 8003da0:	687f      	ldr	r7, [r7, #4]
 8003da2:	e7b6      	b.n	8003d12 <_malloc_r+0x4a>
 8003da4:	461a      	mov	r2, r3
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d1fb      	bne.n	8003da4 <_malloc_r+0xdc>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6053      	str	r3, [r2, #4]
 8003db0:	e7de      	b.n	8003d70 <_malloc_r+0xa8>
 8003db2:	230c      	movs	r3, #12
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 f99a 	bl	80040f0 <__malloc_unlock>
 8003dbc:	e794      	b.n	8003ce8 <_malloc_r+0x20>
 8003dbe:	6005      	str	r5, [r0, #0]
 8003dc0:	e7d6      	b.n	8003d70 <_malloc_r+0xa8>
 8003dc2:	bf00      	nop
 8003dc4:	2000025c 	.word	0x2000025c

08003dc8 <_printf_common>:
 8003dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	4616      	mov	r6, r2
 8003dce:	4698      	mov	r8, r3
 8003dd0:	688a      	ldr	r2, [r1, #8]
 8003dd2:	690b      	ldr	r3, [r1, #16]
 8003dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bfb8      	it	lt
 8003ddc:	4613      	movlt	r3, r2
 8003dde:	6033      	str	r3, [r6, #0]
 8003de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de4:	4607      	mov	r7, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	b10a      	cbz	r2, 8003dee <_printf_common+0x26>
 8003dea:	3301      	adds	r3, #1
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	0699      	lsls	r1, r3, #26
 8003df2:	bf42      	ittt	mi
 8003df4:	6833      	ldrmi	r3, [r6, #0]
 8003df6:	3302      	addmi	r3, #2
 8003df8:	6033      	strmi	r3, [r6, #0]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	f015 0506 	ands.w	r5, r5, #6
 8003e00:	d106      	bne.n	8003e10 <_printf_common+0x48>
 8003e02:	f104 0a19 	add.w	sl, r4, #25
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	6832      	ldr	r2, [r6, #0]
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	dc26      	bgt.n	8003e5e <_printf_common+0x96>
 8003e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	3b00      	subs	r3, #0
 8003e18:	bf18      	it	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	0692      	lsls	r2, r2, #26
 8003e1e:	d42b      	bmi.n	8003e78 <_printf_common+0xb0>
 8003e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e24:	4641      	mov	r1, r8
 8003e26:	4638      	mov	r0, r7
 8003e28:	47c8      	blx	r9
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d01e      	beq.n	8003e6c <_printf_common+0xa4>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	6922      	ldr	r2, [r4, #16]
 8003e32:	f003 0306 	and.w	r3, r3, #6
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	bf02      	ittt	eq
 8003e3a:	68e5      	ldreq	r5, [r4, #12]
 8003e3c:	6833      	ldreq	r3, [r6, #0]
 8003e3e:	1aed      	subeq	r5, r5, r3
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	bf0c      	ite	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	2500      	movne	r5, #0
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	bfc4      	itt	gt
 8003e4e:	1a9b      	subgt	r3, r3, r2
 8003e50:	18ed      	addgt	r5, r5, r3
 8003e52:	2600      	movs	r6, #0
 8003e54:	341a      	adds	r4, #26
 8003e56:	42b5      	cmp	r5, r6
 8003e58:	d11a      	bne.n	8003e90 <_printf_common+0xc8>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e008      	b.n	8003e70 <_printf_common+0xa8>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4652      	mov	r2, sl
 8003e62:	4641      	mov	r1, r8
 8003e64:	4638      	mov	r0, r7
 8003e66:	47c8      	blx	r9
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d103      	bne.n	8003e74 <_printf_common+0xac>
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7c6      	b.n	8003e06 <_printf_common+0x3e>
 8003e78:	18e1      	adds	r1, r4, r3
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	2030      	movs	r0, #48	@ 0x30
 8003e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e82:	4422      	add	r2, r4
 8003e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	e7c7      	b.n	8003e20 <_printf_common+0x58>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4622      	mov	r2, r4
 8003e94:	4641      	mov	r1, r8
 8003e96:	4638      	mov	r0, r7
 8003e98:	47c8      	blx	r9
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d0e6      	beq.n	8003e6c <_printf_common+0xa4>
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7d9      	b.n	8003e56 <_printf_common+0x8e>
	...

08003ea4 <_printf_i>:
 8003ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	7e0f      	ldrb	r7, [r1, #24]
 8003eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eac:	2f78      	cmp	r7, #120	@ 0x78
 8003eae:	4691      	mov	r9, r2
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	469a      	mov	sl, r3
 8003eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eba:	d807      	bhi.n	8003ecc <_printf_i+0x28>
 8003ebc:	2f62      	cmp	r7, #98	@ 0x62
 8003ebe:	d80a      	bhi.n	8003ed6 <_printf_i+0x32>
 8003ec0:	2f00      	cmp	r7, #0
 8003ec2:	f000 80d2 	beq.w	800406a <_printf_i+0x1c6>
 8003ec6:	2f58      	cmp	r7, #88	@ 0x58
 8003ec8:	f000 80b9 	beq.w	800403e <_printf_i+0x19a>
 8003ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed4:	e03a      	b.n	8003f4c <_printf_i+0xa8>
 8003ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eda:	2b15      	cmp	r3, #21
 8003edc:	d8f6      	bhi.n	8003ecc <_printf_i+0x28>
 8003ede:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee4 <_printf_i+0x40>)
 8003ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee4:	08003f3d 	.word	0x08003f3d
 8003ee8:	08003f51 	.word	0x08003f51
 8003eec:	08003ecd 	.word	0x08003ecd
 8003ef0:	08003ecd 	.word	0x08003ecd
 8003ef4:	08003ecd 	.word	0x08003ecd
 8003ef8:	08003ecd 	.word	0x08003ecd
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003ecd 	.word	0x08003ecd
 8003f04:	08003ecd 	.word	0x08003ecd
 8003f08:	08003ecd 	.word	0x08003ecd
 8003f0c:	08003ecd 	.word	0x08003ecd
 8003f10:	08004051 	.word	0x08004051
 8003f14:	08003f7b 	.word	0x08003f7b
 8003f18:	0800400b 	.word	0x0800400b
 8003f1c:	08003ecd 	.word	0x08003ecd
 8003f20:	08003ecd 	.word	0x08003ecd
 8003f24:	08004073 	.word	0x08004073
 8003f28:	08003ecd 	.word	0x08003ecd
 8003f2c:	08003f7b 	.word	0x08003f7b
 8003f30:	08003ecd 	.word	0x08003ecd
 8003f34:	08003ecd 	.word	0x08003ecd
 8003f38:	08004013 	.word	0x08004013
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6032      	str	r2, [r6, #0]
 8003f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e09d      	b.n	800408c <_printf_i+0x1e8>
 8003f50:	6833      	ldr	r3, [r6, #0]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	6031      	str	r1, [r6, #0]
 8003f58:	0606      	lsls	r6, r0, #24
 8003f5a:	d501      	bpl.n	8003f60 <_printf_i+0xbc>
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	e003      	b.n	8003f68 <_printf_i+0xc4>
 8003f60:	0645      	lsls	r5, r0, #25
 8003f62:	d5fb      	bpl.n	8003f5c <_printf_i+0xb8>
 8003f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	da03      	bge.n	8003f74 <_printf_i+0xd0>
 8003f6c:	232d      	movs	r3, #45	@ 0x2d
 8003f6e:	426d      	negs	r5, r5
 8003f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f74:	4859      	ldr	r0, [pc, #356]	@ (80040dc <_printf_i+0x238>)
 8003f76:	230a      	movs	r3, #10
 8003f78:	e011      	b.n	8003f9e <_printf_i+0xfa>
 8003f7a:	6821      	ldr	r1, [r4, #0]
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	0608      	lsls	r0, r1, #24
 8003f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f84:	d402      	bmi.n	8003f8c <_printf_i+0xe8>
 8003f86:	0649      	lsls	r1, r1, #25
 8003f88:	bf48      	it	mi
 8003f8a:	b2ad      	uxthmi	r5, r5
 8003f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f8e:	4853      	ldr	r0, [pc, #332]	@ (80040dc <_printf_i+0x238>)
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	bf14      	ite	ne
 8003f94:	230a      	movne	r3, #10
 8003f96:	2308      	moveq	r3, #8
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f9e:	6866      	ldr	r6, [r4, #4]
 8003fa0:	60a6      	str	r6, [r4, #8]
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	bfa2      	ittt	ge
 8003fa6:	6821      	ldrge	r1, [r4, #0]
 8003fa8:	f021 0104 	bicge.w	r1, r1, #4
 8003fac:	6021      	strge	r1, [r4, #0]
 8003fae:	b90d      	cbnz	r5, 8003fb4 <_printf_i+0x110>
 8003fb0:	2e00      	cmp	r6, #0
 8003fb2:	d04b      	beq.n	800404c <_printf_i+0x1a8>
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fba:	fb03 5711 	mls	r7, r3, r1, r5
 8003fbe:	5dc7      	ldrb	r7, [r0, r7]
 8003fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc4:	462f      	mov	r7, r5
 8003fc6:	42bb      	cmp	r3, r7
 8003fc8:	460d      	mov	r5, r1
 8003fca:	d9f4      	bls.n	8003fb6 <_printf_i+0x112>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10b      	bne.n	8003fe8 <_printf_i+0x144>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	07df      	lsls	r7, r3, #31
 8003fd4:	d508      	bpl.n	8003fe8 <_printf_i+0x144>
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	6861      	ldr	r1, [r4, #4]
 8003fda:	4299      	cmp	r1, r3
 8003fdc:	bfde      	ittt	le
 8003fde:	2330      	movle	r3, #48	@ 0x30
 8003fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003fe8:	1b92      	subs	r2, r2, r6
 8003fea:	6122      	str	r2, [r4, #16]
 8003fec:	f8cd a000 	str.w	sl, [sp]
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	aa03      	add	r2, sp, #12
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff fee6 	bl	8003dc8 <_printf_common>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d14a      	bne.n	8004096 <_printf_i+0x1f2>
 8004000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004004:	b004      	add	sp, #16
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f043 0320 	orr.w	r3, r3, #32
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	4833      	ldr	r0, [pc, #204]	@ (80040e0 <_printf_i+0x23c>)
 8004014:	2778      	movs	r7, #120	@ 0x78
 8004016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	6831      	ldr	r1, [r6, #0]
 800401e:	061f      	lsls	r7, r3, #24
 8004020:	f851 5b04 	ldr.w	r5, [r1], #4
 8004024:	d402      	bmi.n	800402c <_printf_i+0x188>
 8004026:	065f      	lsls	r7, r3, #25
 8004028:	bf48      	it	mi
 800402a:	b2ad      	uxthmi	r5, r5
 800402c:	6031      	str	r1, [r6, #0]
 800402e:	07d9      	lsls	r1, r3, #31
 8004030:	bf44      	itt	mi
 8004032:	f043 0320 	orrmi.w	r3, r3, #32
 8004036:	6023      	strmi	r3, [r4, #0]
 8004038:	b11d      	cbz	r5, 8004042 <_printf_i+0x19e>
 800403a:	2310      	movs	r3, #16
 800403c:	e7ac      	b.n	8003f98 <_printf_i+0xf4>
 800403e:	4827      	ldr	r0, [pc, #156]	@ (80040dc <_printf_i+0x238>)
 8004040:	e7e9      	b.n	8004016 <_printf_i+0x172>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f023 0320 	bic.w	r3, r3, #32
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	e7f6      	b.n	800403a <_printf_i+0x196>
 800404c:	4616      	mov	r6, r2
 800404e:	e7bd      	b.n	8003fcc <_printf_i+0x128>
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	6825      	ldr	r5, [r4, #0]
 8004054:	6961      	ldr	r1, [r4, #20]
 8004056:	1d18      	adds	r0, r3, #4
 8004058:	6030      	str	r0, [r6, #0]
 800405a:	062e      	lsls	r6, r5, #24
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	d501      	bpl.n	8004064 <_printf_i+0x1c0>
 8004060:	6019      	str	r1, [r3, #0]
 8004062:	e002      	b.n	800406a <_printf_i+0x1c6>
 8004064:	0668      	lsls	r0, r5, #25
 8004066:	d5fb      	bpl.n	8004060 <_printf_i+0x1bc>
 8004068:	8019      	strh	r1, [r3, #0]
 800406a:	2300      	movs	r3, #0
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	4616      	mov	r6, r2
 8004070:	e7bc      	b.n	8003fec <_printf_i+0x148>
 8004072:	6833      	ldr	r3, [r6, #0]
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	6032      	str	r2, [r6, #0]
 8004078:	681e      	ldr	r6, [r3, #0]
 800407a:	6862      	ldr	r2, [r4, #4]
 800407c:	2100      	movs	r1, #0
 800407e:	4630      	mov	r0, r6
 8004080:	f7fc f8ae 	bl	80001e0 <memchr>
 8004084:	b108      	cbz	r0, 800408a <_printf_i+0x1e6>
 8004086:	1b80      	subs	r0, r0, r6
 8004088:	6060      	str	r0, [r4, #4]
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	2300      	movs	r3, #0
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004094:	e7aa      	b.n	8003fec <_printf_i+0x148>
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	4632      	mov	r2, r6
 800409a:	4649      	mov	r1, r9
 800409c:	4640      	mov	r0, r8
 800409e:	47d0      	blx	sl
 80040a0:	3001      	adds	r0, #1
 80040a2:	d0ad      	beq.n	8004000 <_printf_i+0x15c>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	079b      	lsls	r3, r3, #30
 80040a8:	d413      	bmi.n	80040d2 <_printf_i+0x22e>
 80040aa:	68e0      	ldr	r0, [r4, #12]
 80040ac:	9b03      	ldr	r3, [sp, #12]
 80040ae:	4298      	cmp	r0, r3
 80040b0:	bfb8      	it	lt
 80040b2:	4618      	movlt	r0, r3
 80040b4:	e7a6      	b.n	8004004 <_printf_i+0x160>
 80040b6:	2301      	movs	r3, #1
 80040b8:	4632      	mov	r2, r6
 80040ba:	4649      	mov	r1, r9
 80040bc:	4640      	mov	r0, r8
 80040be:	47d0      	blx	sl
 80040c0:	3001      	adds	r0, #1
 80040c2:	d09d      	beq.n	8004000 <_printf_i+0x15c>
 80040c4:	3501      	adds	r5, #1
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	9903      	ldr	r1, [sp, #12]
 80040ca:	1a5b      	subs	r3, r3, r1
 80040cc:	42ab      	cmp	r3, r5
 80040ce:	dcf2      	bgt.n	80040b6 <_printf_i+0x212>
 80040d0:	e7eb      	b.n	80040aa <_printf_i+0x206>
 80040d2:	2500      	movs	r5, #0
 80040d4:	f104 0619 	add.w	r6, r4, #25
 80040d8:	e7f5      	b.n	80040c6 <_printf_i+0x222>
 80040da:	bf00      	nop
 80040dc:	08004309 	.word	0x08004309
 80040e0:	0800431a 	.word	0x0800431a

080040e4 <__malloc_lock>:
 80040e4:	4801      	ldr	r0, [pc, #4]	@ (80040ec <__malloc_lock+0x8>)
 80040e6:	f7ff bc73 	b.w	80039d0 <__retarget_lock_acquire_recursive>
 80040ea:	bf00      	nop
 80040ec:	20000254 	.word	0x20000254

080040f0 <__malloc_unlock>:
 80040f0:	4801      	ldr	r0, [pc, #4]	@ (80040f8 <__malloc_unlock+0x8>)
 80040f2:	f7ff bc6e 	b.w	80039d2 <__retarget_lock_release_recursive>
 80040f6:	bf00      	nop
 80040f8:	20000254 	.word	0x20000254

080040fc <_realloc_r>:
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	4680      	mov	r8, r0
 8004102:	4615      	mov	r5, r2
 8004104:	460c      	mov	r4, r1
 8004106:	b921      	cbnz	r1, 8004112 <_realloc_r+0x16>
 8004108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800410c:	4611      	mov	r1, r2
 800410e:	f7ff bddb 	b.w	8003cc8 <_malloc_r>
 8004112:	b92a      	cbnz	r2, 8004120 <_realloc_r+0x24>
 8004114:	f000 f858 	bl	80041c8 <_free_r>
 8004118:	2400      	movs	r4, #0
 800411a:	4620      	mov	r0, r4
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004120:	f000 f89c 	bl	800425c <_malloc_usable_size_r>
 8004124:	4285      	cmp	r5, r0
 8004126:	4606      	mov	r6, r0
 8004128:	d802      	bhi.n	8004130 <_realloc_r+0x34>
 800412a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800412e:	d8f4      	bhi.n	800411a <_realloc_r+0x1e>
 8004130:	4629      	mov	r1, r5
 8004132:	4640      	mov	r0, r8
 8004134:	f7ff fdc8 	bl	8003cc8 <_malloc_r>
 8004138:	4607      	mov	r7, r0
 800413a:	2800      	cmp	r0, #0
 800413c:	d0ec      	beq.n	8004118 <_realloc_r+0x1c>
 800413e:	42b5      	cmp	r5, r6
 8004140:	462a      	mov	r2, r5
 8004142:	4621      	mov	r1, r4
 8004144:	bf28      	it	cs
 8004146:	4632      	movcs	r2, r6
 8004148:	f000 f830 	bl	80041ac <memcpy>
 800414c:	4621      	mov	r1, r4
 800414e:	4640      	mov	r0, r8
 8004150:	f000 f83a 	bl	80041c8 <_free_r>
 8004154:	463c      	mov	r4, r7
 8004156:	e7e0      	b.n	800411a <_realloc_r+0x1e>

08004158 <memmove>:
 8004158:	4288      	cmp	r0, r1
 800415a:	b510      	push	{r4, lr}
 800415c:	eb01 0402 	add.w	r4, r1, r2
 8004160:	d902      	bls.n	8004168 <memmove+0x10>
 8004162:	4284      	cmp	r4, r0
 8004164:	4623      	mov	r3, r4
 8004166:	d807      	bhi.n	8004178 <memmove+0x20>
 8004168:	1e43      	subs	r3, r0, #1
 800416a:	42a1      	cmp	r1, r4
 800416c:	d008      	beq.n	8004180 <memmove+0x28>
 800416e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004176:	e7f8      	b.n	800416a <memmove+0x12>
 8004178:	4402      	add	r2, r0
 800417a:	4601      	mov	r1, r0
 800417c:	428a      	cmp	r2, r1
 800417e:	d100      	bne.n	8004182 <memmove+0x2a>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800418a:	e7f7      	b.n	800417c <memmove+0x24>

0800418c <_sbrk_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4d06      	ldr	r5, [pc, #24]	@ (80041a8 <_sbrk_r+0x1c>)
 8004190:	2300      	movs	r3, #0
 8004192:	4604      	mov	r4, r0
 8004194:	4608      	mov	r0, r1
 8004196:	602b      	str	r3, [r5, #0]
 8004198:	f7fc fc90 	bl	8000abc <_sbrk>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d102      	bne.n	80041a6 <_sbrk_r+0x1a>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b103      	cbz	r3, 80041a6 <_sbrk_r+0x1a>
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	20000260 	.word	0x20000260

080041ac <memcpy>:
 80041ac:	440a      	add	r2, r1
 80041ae:	4291      	cmp	r1, r2
 80041b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80041b4:	d100      	bne.n	80041b8 <memcpy+0xc>
 80041b6:	4770      	bx	lr
 80041b8:	b510      	push	{r4, lr}
 80041ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c2:	4291      	cmp	r1, r2
 80041c4:	d1f9      	bne.n	80041ba <memcpy+0xe>
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <_free_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4605      	mov	r5, r0
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d041      	beq.n	8004254 <_free_r+0x8c>
 80041d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d4:	1f0c      	subs	r4, r1, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfb8      	it	lt
 80041da:	18e4      	addlt	r4, r4, r3
 80041dc:	f7ff ff82 	bl	80040e4 <__malloc_lock>
 80041e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <_free_r+0x90>)
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	b933      	cbnz	r3, 80041f4 <_free_r+0x2c>
 80041e6:	6063      	str	r3, [r4, #4]
 80041e8:	6014      	str	r4, [r2, #0]
 80041ea:	4628      	mov	r0, r5
 80041ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041f0:	f7ff bf7e 	b.w	80040f0 <__malloc_unlock>
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	d908      	bls.n	800420a <_free_r+0x42>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	1821      	adds	r1, r4, r0
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf01      	itttt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	1809      	addeq	r1, r1, r0
 8004206:	6021      	streq	r1, [r4, #0]
 8004208:	e7ed      	b.n	80041e6 <_free_r+0x1e>
 800420a:	461a      	mov	r2, r3
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b10b      	cbz	r3, 8004214 <_free_r+0x4c>
 8004210:	42a3      	cmp	r3, r4
 8004212:	d9fa      	bls.n	800420a <_free_r+0x42>
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	1850      	adds	r0, r2, r1
 8004218:	42a0      	cmp	r0, r4
 800421a:	d10b      	bne.n	8004234 <_free_r+0x6c>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	4401      	add	r1, r0
 8004220:	1850      	adds	r0, r2, r1
 8004222:	4283      	cmp	r3, r0
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	d1e0      	bne.n	80041ea <_free_r+0x22>
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6053      	str	r3, [r2, #4]
 800422e:	4408      	add	r0, r1
 8004230:	6010      	str	r0, [r2, #0]
 8004232:	e7da      	b.n	80041ea <_free_r+0x22>
 8004234:	d902      	bls.n	800423c <_free_r+0x74>
 8004236:	230c      	movs	r3, #12
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	e7d6      	b.n	80041ea <_free_r+0x22>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	1821      	adds	r1, r4, r0
 8004240:	428b      	cmp	r3, r1
 8004242:	bf04      	itt	eq
 8004244:	6819      	ldreq	r1, [r3, #0]
 8004246:	685b      	ldreq	r3, [r3, #4]
 8004248:	6063      	str	r3, [r4, #4]
 800424a:	bf04      	itt	eq
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6054      	str	r4, [r2, #4]
 8004252:	e7ca      	b.n	80041ea <_free_r+0x22>
 8004254:	bd38      	pop	{r3, r4, r5, pc}
 8004256:	bf00      	nop
 8004258:	2000025c 	.word	0x2000025c

0800425c <_malloc_usable_size_r>:
 800425c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004260:	1f18      	subs	r0, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbc      	itt	lt
 8004266:	580b      	ldrlt	r3, [r1, r0]
 8004268:	18c0      	addlt	r0, r0, r3
 800426a:	4770      	bx	lr

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
