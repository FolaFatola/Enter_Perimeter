/*
 * rtc.cpp
 *
 *  Created on: Mar 14, 2025
 *      Author: Fola Fatola
 */

#include "rtc.hpp"

Time_RTC::Time_RTC(I2C_HandleTypeDef *i2c_handle, bool use_twenty_four_hour_time,
		uint8_t seconds, uint8_t minutes,
		uint8_t hours, uint8_t week_day,
		uint8_t date_day, uint8_t month, int year) :
	i2c_handle_{i2c_handle}, twenty_four_hour_time{use_twenty_four_hour_time},
	tim_manager_{TimeManager(seconds, minutes, hours, week_day, date_day, month, year, use_twenty_four_hour_time)}{}

RTC_Status_E Time_RTC::rtc_write_reg(uint8_t register_address, uint8_t *transmit_data) {
	if (i2c_handle_ == nullptr) {
		return RTC_NULL_I2C_HANDLE;
	}

	if (HAL_I2C_Mem_Write(i2c_handle_, DEVICE_ADDR, register_address, MEM_ADDR_SIZE, transmit_data, 1, TIMEOUT) != HAL_OK) {
		return RTC_INIT_FAIL;
	}

	return RTC_OK;
}

RTC_Status_E Time_RTC::rtc_read_reg(uint8_t register_address, uint8_t *recv_data) {
	if (i2c_handle_ == nullptr) {
		return RTC_NULL_I2C_HANDLE;
	}

	if (HAL_I2C_Mem_Read(i2c_handle_, DEVICE_ADDR, register_address, MEM_ADDR_SIZE, recv_data, 1, TIMEOUT) != HAL_OK) {
		return RTC_INIT_FAIL;
	}

	return RTC_OK;
}


RTC_Status_E Time_RTC::rtc_init() {
	RTC_Status_E status = RTC_OK;

	//rtc register stores data in bcd format.
	status = tim_manager_.convert_decimal_time_to_bcd();

	if (status != RTC_OK) {
		return status;
	}

	TimeSpan time_span = tim_manager_.getTimeSpan();

	//fetch the initial values for each of the units of time.
	//Each value of time will be written to a register corresponding to its unit.
	uint8_t seconds = time_span.seconds_.time_value;
	uint8_t minutes = time_span.minutes_.time_value;
	uint8_t hours = time_span.hours_.time_value;
	uint8_t date_day = time_span.date_day_.time_value;
	uint8_t week_day = time_span.week_day_.time_value;
	uint8_t month = time_span.month_.time_value;
	uint8_t year = time_span.year_.time_value;

	uint8_t bcd_time[7] = {seconds, minutes, hours,
			date_day, week_day, month, year};

	uint8_t time_registers[7] = {SECONDS_REG, MINUTES_REG, HOURS_REG,
			WEEK_DAY_REG, DATE_DAY_REG, MONTH_REG, YEAR_REG};

	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
		//write the time values to the time registers.
		status = rtc_write_reg(time_registers[time_unit_idx], &(bcd_time[time_unit_idx]));
		if (status != RTC_OK) {			//if the write fails, return error code.
			return status;
		}
	}

	return status;
}

RTC_Status_E Time_RTC::rtc_get_all_time() {

	uint8_t time_registers[7] = {SECONDS_REG, MINUTES_REG, HOURS_REG,
				WEEK_DAY_REG, DATE_DAY_REG, MONTH_REG, YEAR_REG};

	uint8_t time_unit_values[7];

	RTC_Status_E status = RTC_OK;

	//get all time unit values (BCD format) from RTC registers.
	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
		status = rtc_read_reg(time_registers[time_unit_idx], &time_unit_values[time_unit_idx]);
		if (status != RTC_OK) {	//If read fails for some reason, abort.
			return status;
		}
	}

	//set the time units inside the timer manager.
	tim_manager_.setTime(time_unit_values[0], time_unit_values[1], time_unit_values[2],
			time_unit_values[3], time_unit_values[4], time_unit_values[5], time_unit_values[6]);
	tim_manager_.convert_bcd_time_to_decimal();		//convert bcd time to decimal to return to the user.

	return RTC_OK;
}


RTC_Status_E Time_RTC::rtc_get_time_unit(Time_Type_E time_unit, uint8_t &time_value) {
	RTC_Status_E status = RTC_OK;

	status = rtc_get_all_time();
	if (status != RTC_OK) {			//Register read failed somehow.
		return status;
	}

	TimeSpan time_span = tim_manager_.getTimeSpan();

//	switch (time_unit) {
//		case SECONDS: {
//			time_value = time_span.seconds_.time_value;
//			break;
//		}
//		case MINUTES: {
//			time_value = time_span.minutes_.time_value;
//			break;
//		}
//		case HOURS: {
//			time_value = time_span.hours_.time_value;
//			break;
//		}
//		case DATE_DAY: {
//			time_value = time_span.date_day_.time_value;
//			break;
//		}
//		case WEEK_DAY: {
//			time_value = time_span.week_day_.time_value;
//			break;
//		}
//		case MONTH: {
//			time_value = time_span.month_.time_value;
//			break;
//		}
//		case YEAR: {
////			time_value = millennium + time_span.year_.time_value;
//			break;
//		}
//		default: {
//			break;
//		}
//	};

	return status;
}

//RTC_Status_E Time_RTC::rtc_get_time(TimeSpan &time) {
//	RTC_Status_E status = RTC_OK;
//
//	status = rtc_get_all_time();
//	if (status != RTC_OK) {			//Register read failed somehow.
//		return status;
//	}
//
//	TimeSpan time_span = tim_manager_.getTimeSpan();
//	time_span.year_.time_value += millennium;
//	time = time_span;
//
//	return status;
//}
